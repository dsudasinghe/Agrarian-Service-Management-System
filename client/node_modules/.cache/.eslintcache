[{"E:\\MERN-FARMERS-2022-04-main\\client\\src\\index.js":"1","E:\\MERN-FARMERS-2022-04-main\\client\\src\\App.js":"2","E:\\MERN-FARMERS-2022-04-main\\client\\src\\components\\eventslist.jsx":"3","E:\\MERN-FARMERS-2022-04-main\\client\\src\\components\\announcementslist.jsx":"4","E:\\MERN-FARMERS-2022-04-main\\client\\src\\components\\admin\\dashboard.jsx":"5","E:\\MERN-FARMERS-2022-04-main\\client\\src\\components\\admin\\events.jsx":"6","E:\\MERN-FARMERS-2022-04-main\\client\\src\\components\\admin\\users.jsx":"7","E:\\MERN-FARMERS-2022-04-main\\client\\src\\components\\admin\\categories.jsx":"8","E:\\MERN-FARMERS-2022-04-main\\client\\src\\components\\admin\\announcements.jsx":"9","E:\\MERN-FARMERS-2022-04-main\\client\\src\\components\\admin\\adminadvisors.jsx":"10","E:\\MERN-FARMERS-2022-04-main\\client\\src\\components\\admin\\products.jsx":"11","E:\\MERN-FARMERS-2022-04-main\\client\\src\\components\\admin\\loan.jsx":"12","E:\\MERN-FARMERS-2022-04-main\\client\\src\\components\\admin\\orders.jsx":"13","E:\\MERN-FARMERS-2022-04-main\\client\\src\\components\\auth\\login.jsx":"14","E:\\MERN-FARMERS-2022-04-main\\client\\src\\components\\auth\\signup.jsx":"15","E:\\MERN-FARMERS-2022-04-main\\client\\src\\utils\\routes.js":"16","E:\\MERN-FARMERS-2022-04-main\\client\\src\\components\\admin\\common\\header.jsx":"17","E:\\MERN-FARMERS-2022-04-main\\client\\src\\components\\landingpage.jsx":"18","E:\\MERN-FARMERS-2022-04-main\\client\\src\\components\\admin\\common\\footer.jsx":"19","C:\\Users\\User\\Desktop\\EasyAgro-final\\EasyAgro-fyp-attempt-3\\client\\src\\index.js":"20","C:\\Users\\User\\Desktop\\EasyAgro-final\\EasyAgro-fyp-attempt-3\\client\\src\\App.js":"21","C:\\Users\\User\\Desktop\\EasyAgro-final\\EasyAgro-fyp-attempt-3\\client\\src\\components\\landingpage.jsx":"22","C:\\Users\\User\\Desktop\\EasyAgro-final\\EasyAgro-fyp-attempt-3\\client\\src\\components\\eventslist.jsx":"23","C:\\Users\\User\\Desktop\\EasyAgro-final\\EasyAgro-fyp-attempt-3\\client\\src\\components\\announcementslist.jsx":"24","C:\\Users\\User\\Desktop\\EasyAgro-final\\EasyAgro-fyp-attempt-3\\client\\src\\components\\admin\\users.jsx":"25","C:\\Users\\User\\Desktop\\EasyAgro-final\\EasyAgro-fyp-attempt-3\\client\\src\\components\\admin\\dashboard.jsx":"26","C:\\Users\\User\\Desktop\\EasyAgro-final\\EasyAgro-fyp-attempt-3\\client\\src\\components\\admin\\adminadvisors.jsx":"27","C:\\Users\\User\\Desktop\\EasyAgro-final\\EasyAgro-fyp-attempt-3\\client\\src\\components\\admin\\categories.jsx":"28","C:\\Users\\User\\Desktop\\EasyAgro-final\\EasyAgro-fyp-attempt-3\\client\\src\\components\\admin\\announcements.jsx":"29","C:\\Users\\User\\Desktop\\EasyAgro-final\\EasyAgro-fyp-attempt-3\\client\\src\\components\\admin\\events.jsx":"30","C:\\Users\\User\\Desktop\\EasyAgro-final\\EasyAgro-fyp-attempt-3\\client\\src\\components\\admin\\loan.jsx":"31","C:\\Users\\User\\Desktop\\EasyAgro-final\\EasyAgro-fyp-attempt-3\\client\\src\\components\\admin\\products.jsx":"32","C:\\Users\\User\\Desktop\\EasyAgro-final\\EasyAgro-fyp-attempt-3\\client\\src\\components\\admin\\orders.jsx":"33","C:\\Users\\User\\Desktop\\EasyAgro-final\\EasyAgro-fyp-attempt-3\\client\\src\\components\\auth\\login.jsx":"34","C:\\Users\\User\\Desktop\\EasyAgro-final\\EasyAgro-fyp-attempt-3\\client\\src\\components\\auth\\signup.jsx":"35","C:\\Users\\User\\Desktop\\EasyAgro-final\\EasyAgro-fyp-attempt-3\\client\\src\\utils\\routes.js":"36","C:\\Users\\User\\Desktop\\EasyAgro-final\\EasyAgro-fyp-attempt-3\\client\\src\\components\\admin\\common\\footer.jsx":"37","C:\\Users\\User\\Desktop\\EasyAgro-final\\EasyAgro-fyp-attempt-3\\client\\src\\components\\admin\\common\\header.jsx":"38","C:\\Users\\User\\Desktop\\EasyAgro-final\\EasyAgro-fyp-attempt-3\\client\\src\\components\\admin\\map.jsx":"39"},{"size":325,"mtime":1653282258000,"results":"40","hashOfConfig":"41"},{"size":3156,"mtime":1653404143167,"results":"42","hashOfConfig":"41"},{"size":2501,"mtime":1653526117634,"results":"43","hashOfConfig":"41"},{"size":1378,"mtime":1653526105013,"results":"44","hashOfConfig":"41"},{"size":8411,"mtime":1653526014043,"results":"45","hashOfConfig":"41"},{"size":10175,"mtime":1653526048177,"results":"46","hashOfConfig":"41"},{"size":8557,"mtime":1653526080825,"results":"47","hashOfConfig":"41"},{"size":6967,"mtime":1653525998244,"results":"48","hashOfConfig":"41"},{"size":7555,"mtime":1653525976537,"results":"49","hashOfConfig":"41"},{"size":7087,"mtime":1653525961723,"results":"50","hashOfConfig":"41"},{"size":9390,"mtime":1653525493106,"results":"51","hashOfConfig":"41"},{"size":8107,"mtime":1653526058692,"results":"52","hashOfConfig":"41"},{"size":4125,"mtime":1653526068268,"results":"53","hashOfConfig":"41"},{"size":3606,"mtime":1653483043290,"results":"54","hashOfConfig":"41"},{"size":4631,"mtime":1653482993938,"results":"55","hashOfConfig":"41"},{"size":4234,"mtime":1653282258000,"results":"56","hashOfConfig":"41"},{"size":3148,"mtime":1653483233234,"results":"57","hashOfConfig":"41"},{"size":410,"mtime":1653526136198,"results":"58","hashOfConfig":"41"},{"size":638,"mtime":1653525601807,"results":"59","hashOfConfig":"41"},{"size":325,"mtime":1653282258000,"results":"60","hashOfConfig":"61"},{"size":3156,"mtime":1653404143167,"results":"62","hashOfConfig":"61"},{"size":2112,"mtime":1653927710135,"results":"63","hashOfConfig":"61"},{"size":2501,"mtime":1653526117634,"results":"64","hashOfConfig":"61"},{"size":1378,"mtime":1653526105013,"results":"65","hashOfConfig":"61"},{"size":8634,"mtime":1653711057016,"results":"66","hashOfConfig":"61"},{"size":10909,"mtime":1653984056714,"results":"67","hashOfConfig":"61"},{"size":7087,"mtime":1653525961723,"results":"68","hashOfConfig":"61"},{"size":6967,"mtime":1653525998244,"results":"69","hashOfConfig":"61"},{"size":7555,"mtime":1653525976537,"results":"70","hashOfConfig":"61"},{"size":10175,"mtime":1653975058005,"results":"71","hashOfConfig":"61"},{"size":8542,"mtime":1653990496706,"results":"72","hashOfConfig":"61"},{"size":9390,"mtime":1653525493106,"results":"73","hashOfConfig":"61"},{"size":5051,"mtime":1653983837773,"results":"74","hashOfConfig":"61"},{"size":3606,"mtime":1653483043290,"results":"75","hashOfConfig":"61"},{"size":4631,"mtime":1653482993938,"results":"76","hashOfConfig":"61"},{"size":3586,"mtime":1653982037465,"results":"77","hashOfConfig":"61"},{"size":638,"mtime":1653525601807,"results":"78","hashOfConfig":"61"},{"size":3148,"mtime":1653675107562,"results":"79","hashOfConfig":"61"},{"size":810,"mtime":1653700576887,"results":"80","hashOfConfig":"61"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"d78e3e",{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132"},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1tdydy3",{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148"},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155"},{"filePath":"156","messages":"157","suppressedMessages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159"},{"filePath":"160","messages":"161","suppressedMessages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163"},{"filePath":"164","messages":"165","suppressedMessages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167"},{"filePath":"168","messages":"169","suppressedMessages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171"},{"filePath":"172","messages":"173","suppressedMessages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175"},{"filePath":"176","messages":"177","suppressedMessages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179"},{"filePath":"180","messages":"181","suppressedMessages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183"},{"filePath":"184","messages":"185","suppressedMessages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187"},{"filePath":"188","messages":"189","suppressedMessages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191"},{"filePath":"192","messages":"193","suppressedMessages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","suppressedMessages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"198","messages":"199","suppressedMessages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"201","messages":"202","suppressedMessages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204"},{"filePath":"205","messages":"206","suppressedMessages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132"},{"filePath":"208","messages":"209","suppressedMessages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\MERN-FARMERS-2022-04-main\\client\\src\\index.js",[],[],"E:\\MERN-FARMERS-2022-04-main\\client\\src\\App.js",[],[],"E:\\MERN-FARMERS-2022-04-main\\client\\src\\components\\eventslist.jsx",[],[],"E:\\MERN-FARMERS-2022-04-main\\client\\src\\components\\announcementslist.jsx",["211"],[],"E:\\MERN-FARMERS-2022-04-main\\client\\src\\components\\admin\\dashboard.jsx",["212","213","214","215","216","217"],[],"E:\\MERN-FARMERS-2022-04-main\\client\\src\\components\\admin\\events.jsx",["218","219","220","221"],[],"E:\\MERN-FARMERS-2022-04-main\\client\\src\\components\\admin\\users.jsx",["222"],[],"E:\\MERN-FARMERS-2022-04-main\\client\\src\\components\\admin\\categories.jsx",["223","224","225"],[],"E:\\MERN-FARMERS-2022-04-main\\client\\src\\components\\admin\\announcements.jsx",["226","227","228"],[],"E:\\MERN-FARMERS-2022-04-main\\client\\src\\components\\admin\\adminadvisors.jsx",["229","230","231","232","233","234","235","236","237","238","239","240","241"],[],"E:\\MERN-FARMERS-2022-04-main\\client\\src\\components\\admin\\products.jsx",["242","243","244"],[],"E:\\MERN-FARMERS-2022-04-main\\client\\src\\components\\admin\\loan.jsx",["245","246","247","248","249","250","251","252","253"],[],"E:\\MERN-FARMERS-2022-04-main\\client\\src\\components\\admin\\orders.jsx",["254","255","256","257","258","259","260","261"],[],"E:\\MERN-FARMERS-2022-04-main\\client\\src\\components\\auth\\login.jsx",[],[],"E:\\MERN-FARMERS-2022-04-main\\client\\src\\components\\auth\\signup.jsx",[],[],"E:\\MERN-FARMERS-2022-04-main\\client\\src\\utils\\routes.js",[],[],"E:\\MERN-FARMERS-2022-04-main\\client\\src\\components\\admin\\common\\header.jsx",["262","263","264"],[],"import { React } from \"react\";\nimport Swal from \"sweetalert2\";\nimport { Container, NavDropdown, Navbar, Image, Nav } from \"react-bootstrap\";\nimport image from \"../../../assets/logo2.png\";\n\nconst Header = () => {\n  const doLogout = () => {\n    Swal.fire({\n      title: \"Are you sure to logout\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: \"Yes\",\n    }).then((result) => {\n      if (result.isConfirmed) {\n        localStorage.clear();\n        window.location = \"/\";\n      }\n    });\n  };\n\n  const getUserData = () => {\n    return JSON.parse(localStorage.getItem(\"user\"));\n  };\n\n  return (\n    <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n      <Container>\n        <Image src={image} width=\"50\" height=\"50\" />\n        <Navbar.Brand href=\"/home\">EasyAgro-Agrarian Service</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\n          <Nav className=\"me-auto\">\n            <Nav.Link href=\"/productlist\">Products</Nav.Link>\n            <Nav.Link href=\"/announcementslist\">Anouncements</Nav.Link>\n            <Nav.Link href=\"/eventslist\">Events</Nav.Link>\n            {getUserData().usertype == 3 && (\n              <Nav.Link href=\"/admin/orders\">My Orders</Nav.Link>\n            )}\n            {getUserData().usertype == 3 && (\n              <Nav.Link href=\"/admin/loans\">Loans</Nav.Link>\n            )}\n            {getUserData().usertype == 3 && (\n              <Nav.Link href=\"/admin/advisors\">Ask Question</Nav.Link>\n            )}\n\n            {(getUserData().usertype === 1 || getUserData().usertype === 2) && (\n              <NavDropdown title=\"Options\" id=\"collasible-nav-dropdown\">\n                <NavDropdown.Item href=\"/categories\">\n                  Categories\n                </NavDropdown.Item>\n                <NavDropdown.Item href=\"/products\">Products</NavDropdown.Item>\n                <NavDropdown.Divider />\n                <NavDropdown.Item href=\"/events\">Events</NavDropdown.Item>\n                <NavDropdown.Item href=\"/announcements\">\n                  Announcements\n                </NavDropdown.Item>\n                <NavDropdown.Divider />\n                <NavDropdown.Item href=\"/admin/loans\">Loans</NavDropdown.Item>\n                <NavDropdown.Item href=\"/admin/orders\">Orders</NavDropdown.Item>\n                <NavDropdown.Divider />\n                <NavDropdown.Item href=\"/admin/advisors\">\n                  Advisors\n                </NavDropdown.Item>\n\n                {getUserData().usertype === 1 && <NavDropdown.Divider />}\n                {getUserData().usertype === 1 && (\n                  <NavDropdown.Item href=\"/users\">Users</NavDropdown.Item>\n                )}\n              </NavDropdown>\n            )}\n          </Nav>\n          <Nav>\n            <NavDropdown\n              title={getUserData().name}\n              id=\"collasible-nav-dropdown\"\n            >\n              <NavDropdown.Item onClick={doLogout}>Logout</NavDropdown.Item>\n            </NavDropdown>\n          </Nav>\n        </Navbar.Collapse>\n      </Container>\n    </Navbar>\n  );\n};\n\nexport default Header;\n","E:\\MERN-FARMERS-2022-04-main\\client\\src\\components\\landingpage.jsx",[],[],"E:\\MERN-FARMERS-2022-04-main\\client\\src\\components\\admin\\common\\footer.jsx",["265","266"],[],"C:\\Users\\User\\Desktop\\EasyAgro-final\\EasyAgro-fyp-attempt-3\\client\\src\\index.js",[],[],"C:\\Users\\User\\Desktop\\EasyAgro-final\\EasyAgro-fyp-attempt-3\\client\\src\\App.js",[],[],"C:\\Users\\User\\Desktop\\EasyAgro-final\\EasyAgro-fyp-attempt-3\\client\\src\\components\\landingpage.jsx",["267"],[],"import React from \"react\";\r\nimport { Container, Row, Image, Col } from \"react-bootstrap\";\r\nimport Header from \"./admin/common/header\";\r\nimport Footer from \"./admin/common/footer\";\r\nimport image from \"../assets/landing.jpg\";\r\n//import Map from \"./admin/map\";\r\n\r\nconst Landingpage = () => {\r\n  return (\r\n    <>\r\n      <Header />\r\n\r\n      <Container\r\n        style={{ marginBottom: \"90px\", textAlign: \"center\", marginTop: \"30px\" }}\r\n      >\r\n        <Row>\r\n          <h3 className=\"text-secondary\">\r\n            Welcome to EasyAgro Agrarian Service!\r\n          </h3>\r\n          <p\r\n            className=\"text-secondary\"\r\n            style={{ marginTop: \"20px\", marginBottom: \"20px\" }}\r\n          >\r\n            The Department of Agrarian Development was established on 01st\r\n            October 1957 with the objective of providing necessary facilities to\r\n            Sri Lankan farmer community abolishing the hitherto existed Food\r\n            Department. This department empowered by the Paddy Lands Act No. 46\r\n            of 1958 is currently functions as the Department of Agrarian\r\n            Development as per the Agrarian Development Act No. 46 of 2000 and\r\n            its subsequent amendments.\r\n          </p>\r\n          <Image src={image}></Image>\r\n        </Row>\r\n        {/*<Row className=\"justify-content-center mt-5\">\r\n          <Col className=\"shadow-sm text-secondary mt-5 p-4 rounded\">\r\n            <h6>Shop Online.</h6>\r\n          </Col>\r\n          <Col className=\"shadow-sm text-secondary mt-5 p-4 rounded\">\r\n            <h6>Events.</h6>\r\n          </Col>\r\n          <Col className=\"shadow-sm text-secondary mt-5 p-4 rounded\">\r\n            <h6>Special Announcement.</h6>\r\n          </Col>\r\n          <Col className=\"shadow-sm text-secondary mt-5 p-4 rounded\">\r\n            <h6>Apply for Loans.</h6>\r\n          </Col>\r\n        </Row> AIzaSyBheNEtrngM3cbowGS3tLPwoBXlswmmSb0\r\n*/}\r\n        {/*<Container style={{ width: \"100px\", hight: \"100px\" }}>\r\n          <Map></Map>\r\n        </Container>*/}\r\n      </Container>\r\n      <Footer></Footer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Landingpage;\r\n","C:\\Users\\User\\Desktop\\EasyAgro-final\\EasyAgro-fyp-attempt-3\\client\\src\\components\\eventslist.jsx",[],[],"C:\\Users\\User\\Desktop\\EasyAgro-final\\EasyAgro-fyp-attempt-3\\client\\src\\components\\announcementslist.jsx",["268"],[],"import { useState, useEffect, React } from \"react\";\nimport Header from \"./admin/common/header\";\nimport Notiflix from \"notiflix\";\nimport Moment from \"moment\";\nimport { Col, Container, Row } from \"react-bootstrap\";\nimport Footer from \"./admin/common/footer\";\n\nimport getUrl from \"../utils/routes\";\nimport axios from \"axios\";\n\nconst AnnouncementList = () => {\n  const [list, setList] = useState([]);\n\n  const getList = async () => {\n    Notiflix.Loading.standard(\"Loading Announcements\");\n    let resp = await axios.post(getUrl(\"listActiveAnnouncement\"));\n    setList(resp.data);\n    Notiflix.Loading.remove();\n  };\n\n  useEffect(() => {\n    getList();\n  }, []);\n\n  return (\n    <>\n      <Header />\n      <Container\n        className=\"shadow-sm text-success mt-5 p-4 rounded\"\n        style={{ marginBottom: \"90px\" }}\n      >\n        <Row className=\"justify-content-start mt-5\">\n          <Col md={12} sm={12}>\n            <h4 className=\" text-success pb-4\">Announcements</h4>\n          </Col>\n          {list.map((item, index) => (\n            <Col md={6} sm={12} className=\"shadow-sm text-success p-4 rounded\">\n              <h5 className=\" text-success pb-4\">{item.title}</h5>\n              <p className=\"text-dark\">{item.description}</p>\n            </Col>\n          ))}\n        </Row>\n      </Container>\n      <Footer></Footer>\n    </>\n  );\n};\n\nexport default AnnouncementList;\n","C:\\Users\\User\\Desktop\\EasyAgro-final\\EasyAgro-fyp-attempt-3\\client\\src\\components\\admin\\users.jsx",["269"],[],"import { useState, useEffect, React } from \"react\";\nimport Header from \"./common/header\";\nimport Notiflix from \"notiflix\";\nimport Swal from \"sweetalert2\";\nimport {\n  Col,\n  Table,\n  Container,\n  Row,\n  Badge,\n  Form,\n  Button,\n  Alert,\n} from \"react-bootstrap\";\n\nimport getUrl from \"../../utils/routes\";\nimport axios from \"axios\";\nimport Footer from \"./common/footer\";\n\nconst Users = () => {\n  const [list, setList] = useState([]);\n\n  const handleEnrollment = async (e) => {\n    e.preventDefault();\n    try {\n      console.log(data);\n      Notiflix.Loading.standard();\n      if (isnew === false) {\n        data[\"id\"] = recordid;\n      }\n      await axios.post(\n        getUrl(isnew === true ? \"addUsers\" : \"updateUsers\"),\n        data\n      );\n      setData(initialData);\n      setIsnew(true);\n      setError({\n        message: \"User Processed Successfully\",\n        color: \"success\",\n      });\n      Notiflix.Loading.remove();\n      getList();\n    } catch (error) {\n      Notiflix.Loading.remove();\n      console.log(error);\n      if (\n        error.response &&\n        (error.response.status === 400 || error.response.status === 401)\n      ) {\n        setError({\n          message: error.response.data.message,\n          color: \"danger\",\n        });\n      }\n    }\n  };\n\n  const getList = async () => {\n    Notiflix.Loading.standard(\"Loading Users\");\n    let resp = await axios.post(getUrl(\"listUsers\"));\n    setList(resp.data);\n    Notiflix.Loading.remove();\n  };\n\n  useEffect(() => {\n    getList();\n  }, []);\n\n  const initialData = {\n    name: \"\",\n    email: \"\",\n    nic: \"\",\n    password: \"\",\n    usertype: 1,\n  };\n\n  const [data, setData] = useState(initialData);\n\n  const [isnew, setIsnew] = useState(true);\n  const [recordid, setRecordid] = useState(0);\n\n  const [error, setError] = useState({\n    message: \"\",\n    color: \"success\",\n  });\n\n  const handleChange = ({ currentTarget: input }) => {\n    setData({ ...data, [input.name]: input.value });\n  };\n\n  const handleDelete = async (record) => {\n    Swal.fire({\n      title: \"Are you sure to delete this record\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: \"Yes\",\n    }).then(async (result) => {\n      Notiflix.Loading.standard();\n      await axios.post(getUrl(\"deleteUsers\"), { id: record });\n      Notiflix.Loading.remove();\n      getList();\n    });\n  };\n\n  const handleGet = async (record) => {\n    Swal.fire({\n      title: \"Are you sure to edit this record\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: \"Yes\",\n    }).then(async (result) => {\n      Notiflix.Loading.standard();\n      let response = await axios.post(getUrl(\"getUsers\"), { id: record });\n      if (response.status === 200) {\n        setIsnew(false);\n        setRecordid(response.data._id);\n        setData({\n          email: response.data.email,\n          name: response.data.name,\n          nic: response.data.nic,\n          usertype: response.data.usertype,\n        });\n      }\n      Notiflix.Loading.remove();\n    });\n  };\n\n  return (\n    <>\n      <Header />\n      <Container fluid style={{ marginBottom: \"90px\" }}>\n        <Row className=\"justify-content-center mt-5\">\n          <Col\n            md={9}\n            sm={12}\n            className=\"shadow-sm text-success mt-5 p-4 rounded\"\n          >\n            <h6 className=\" text-success pb-4\">User Account List</h6>\n            <Table striped bordered hover>\n              <thead>\n                <tr>\n                  <th>#</th>\n                  <th>Name</th>\n                  <th>NIC</th>\n                  <th>E-mail</th>\n                  <th>Usertype</th>\n                  <th>Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {list.length == 0 && (\n                  <tr className=\"text-center\">\n                    <td className=\"text-danger\" colSpan={5}>\n                      No Data Found\n                    </td>\n                  </tr>\n                )}\n                {list.map((item, index) => (\n                  <tr key={item._id}>\n                    <td>{index + 1}</td>\n                    <td>{item.name}</td>\n\n                    <td>{item.nic}</td>\n                    <td>{item.email}</td>\n                    <td>\n                      <Badge bg=\"primary\">\n                        {\n                          {\n                            1: \"Administrator\",\n                            2: \"Staff User\",\n                            3: \"Farmer / Standard User\",\n                          }[item.usertype]\n                        }\n                      </Badge>\n                    </td>\n                    <td>\n                      <Button\n                        className=\"mx-1\"\n                        variant=\"primary\"\n                        size=\"sm\"\n                        onClick={() => handleGet(item._id)}\n                      >\n                        Edit\n                      </Button>\n                      <Button\n                        className=\"mx-1\"\n                        variant=\"danger\"\n                        size=\"sm\"\n                        onClick={() => handleDelete(item._id)}\n                      >\n                        Delete\n                      </Button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </Table>\n          </Col>\n          <Col\n            md={3}\n            sm={12}\n            className=\"shadow-sm text-success mt-5 p-4 rounded\"\n          >\n            <h6 className=\" text-success pb-4\">Add / Update User Accounts</h6>\n\n            <Form className=\"text-start\" onSubmit={handleEnrollment}>\n              <Form.Group className=\"mb-3\" controlId=\"nameGroup\">\n                <Form.Label>Name</Form.Label>\n                <Form.Control\n                  onChange={handleChange}\n                  required\n                  name=\"name\"\n                  value={data.name}\n                  type=\"text\"\n                  placeholder=\"Enter user name\"\n                />\n              </Form.Group>\n              <Form.Group className=\"mb-3\" controlId=\"nicGroup\">\n                <Form.Label>NIC</Form.Label>\n                <Form.Control\n                  onChange={handleChange}\n                  required\n                  name=\"nic\"\n                  value={data.nic}\n                  type=\"text\"\n                  placeholder=\"Enter user nic\"\n                />\n              </Form.Group>\n              <Form.Group className=\"mb-3\" controlId=\"emailGroup\">\n                <Form.Label>Email</Form.Label>\n                <Form.Control\n                  onChange={handleChange}\n                  required\n                  name=\"email\"\n                  value={data.email}\n                  type=\"text\"\n                  placeholder=\"Enter user Email\"\n                />\n              </Form.Group>\n              <Form.Group className=\"mb-3\" controlId=\"passwordGroup\">\n                <Form.Label>Password</Form.Label>\n                <Form.Control\n                  onChange={handleChange}\n                  name=\"password\"\n                  value={data.password}\n                  type=\"password\"\n                  placeholder=\"Enter user account password\"\n                />\n              </Form.Group>\n              <Form.Group className=\"mb-3\" controlId=\"usertypeGroup\">\n                <Form.Label>Usertype</Form.Label>\n                <Form.Select\n                  onChange={handleChange}\n                  name=\"usertype\"\n                  value={data.usertype}\n                >\n                  <option value={1}>Administrator</option>\n                  <option value={2}>Staff</option>\n                  <option value={3}>Farmer / Standard User</option>\n                </Form.Select>\n              </Form.Group>\n              {error && error.message && (\n                <Alert key={error.color} variant={error.color}>\n                  {error.message}\n                </Alert>\n              )}\n              <Button\n                className=\"mt-4 w-100\"\n                variant={isnew ? \"success\" : \"warning\"}\n                type=\"submit\"\n              >\n                {isnew ? \"Submit\" : \"Update\"}\n              </Button>\n              <Button\n                className=\"mt-4 w-100\"\n                variant=\"danger\"\n                type=\"button\"\n                onClick={() => {\n                  setData(initialData);\n                  setIsnew(true);\n                }}\n              >\n                Reset\n              </Button>\n            </Form>\n          </Col>\n        </Row>\n      </Container>\n      <Footer></Footer>\n    </>\n  );\n};\n\nexport default Users;\n","C:\\Users\\User\\Desktop\\EasyAgro-final\\EasyAgro-fyp-attempt-3\\client\\src\\components\\admin\\dashboard.jsx",["270","271","272","273","274","275"],[],"import { useState, useEffect, React } from \"react\";\nimport getUrl from \"../../utils/routes\";\nimport axios from \"axios\";\nimport Notiflix from \"notiflix\";\nimport Header from \"./common/header\";\nimport {\n  Col,\n  Modal,\n  Container,\n  Row,\n  Table,\n  Form,\n  Button,\n  Alert,\n} from \"react-bootstrap\";\nimport Footer from \"./common/footer\";\nimport Swal from \"sweetalert2\";\nimport { PayPalButton } from \"react-paypal-button-v2\";\n\nconst Home = () => {\n  const [list, setList] = useState([]);\n  const [showModal, setShowModal] = useState(false);\n  const [showCartModal, setShowCartModal] = useState(false);\n  const [showPaymentModal, setShowPaymentModal] = useState(false);\n  const [product, setProduct] = useState(null);\n  const [cartFullTotal, setCartFullTotal] = useState(0);\n  const [shipping, setShipping] = useState(\"\");\n\n  const getList = async () => {\n    Notiflix.Loading.standard(\"Loading Products\");\n    let resp = await axios.post(getUrl(\"ActiveListProduct\"));\n    setList(resp.data);\n    Notiflix.Loading.remove();\n  };\n\n  useEffect(() => {\n    getList();\n  }, []);\n\n  const handleClose = () => {\n    setShowModal(false);\n  };\n  const showProduct = (productRecord) => {\n    setShowModal(true);\n    setProduct(productRecord);\n  };\n\n  const initialData = {\n    name: \"\",\n    description: \"\",\n    price: \"\",\n    quantity: \"\",\n    status: 1,\n  };\n\n  const addToCart = (productObj) => {\n    let productsCart = JSON.parse(localStorage.getItem(\"cart\"));\n    if (productsCart.length > 0) {\n      let checkExists = false;\n      var eleIndex = 0;\n      productsCart.forEach(function (cartItem) {\n        if (productObj._id === cartItem._id) {\n          if (productObj.quantity > productObj[\"cart_qty\"]) {\n            productObj[\"cart_qty\"] = productObj[\"cart_qty\"] + 1;\n            productsCart[eleIndex] = productObj;\n          }\n          checkExists = true;\n        }\n        eleIndex++;\n      });\n\n      if (checkExists == false) {\n        productObj[\"cart_qty\"] = 1;\n        productsCart.push(productObj);\n      }\n    } else {\n      productObj[\"cart_qty\"] = 1;\n      productsCart.push(productObj);\n    }\n    localStorage.setItem(\"cart\", JSON.stringify(productsCart));\n    Swal.fire({\n      icon: \"success\",\n      title: \"Product Added to the cart.\",\n    });\n    console.log(productsCart);\n  };\n  const handleCartModalClose = () => {\n    setShowCartModal(false);\n  };\n\n  const handleCheckout = () => {\n    handleCartModalClose();\n    setShowPaymentModal(true);\n  };\n\n  const handleCheckoutClose = () => {\n    setShowPaymentModal(false);\n  };\n\n  const getUserData = () => {\n    return JSON.parse(localStorage.getItem(\"user\"));\n  };\n\n  var cartTotal = 0.0;\n\n  return (\n    <>\n      <Header></Header>\n      <Container fluid style={{ marginBottom: \"90px\" }}>\n        <Row className=\"justify-content-center mt-5\">\n          <Col md={12}>\n            <Button\n              onClick={() => {\n                cartTotal = 0.0;\n\n                JSON.parse(localStorage.getItem(\"cart\")).forEach(function (\n                  ele\n                ) {\n                  cartTotal += Number(ele.cart_qty * ele.price);\n                });\n\n                console.log(cartTotal);\n                setCartFullTotal(cartTotal);\n\n                setShowCartModal(true);\n              }}\n              className=\"mt-4 pull-right\"\n              variant=\"primary\"\n              type=\"submit\"\n            >\n              View Cart\n            </Button>\n          </Col>\n          {list.map((item, index) => (\n            <Col\n              md={2}\n              sm={12}\n              className=\"shadow-sm text-success mt-5 p-4 rounded\"\n            >\n              <img\n                className=\"w-100\"\n                onClick={() => {\n                  showProduct(item);\n                }}\n                src={require(\"../../../../server/images/\" + item.image)}\n              />\n              <h6 style={{ marginTop: \"20px\" }}>{item.name}</h6>\n              <p className=\"text-danger\">LKR {item.price}</p>\n              <h6>{item.quantity} Available</h6>\n              <Button\n                onClick={() => addToCart(item)}\n                className=\"mt-4 w-100\"\n                variant=\"primary\"\n                type=\"submit\"\n              >\n                Add to cart\n              </Button>\n            </Col>\n          ))}\n        </Row>\n      </Container>\n      <Footer></Footer>\n\n      {product && (\n        <Modal show={showModal} onHide={handleClose}>\n          <Modal.Header closeButton>\n            <Modal.Title>{product.name}</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <img\n              className=\"w-100 mb-3\"\n              src={require(\"../../../../server/images/\" + product.image)}\n            ></img>\n\n            <p>{product.description}</p>\n\n            <p className=\"text-primary\">{product.quantity} Available</p>\n            <h4 className=\"text-danger\">LKR {product.price}</h4>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={handleClose}>\n              Close\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      )}\n\n      <Modal show={showCartModal} onHide={handleCartModalClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>Cart</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Table striped bordered hover>\n            <thead>\n              <tr>\n                <th>#</th>\n                <th>Product</th>\n                <th>Price</th>\n                <th>Quantity</th>\n                <th>Total</th>\n              </tr>\n            </thead>\n            <tbody>\n              {list.length == 0 && (\n                <tr className=\"text-center\">\n                  <td className=\"text-danger\" colSpan={5}>\n                    No Data Found\n                  </td>\n                </tr>\n              )}\n              {JSON.parse(localStorage.getItem(\"cart\")).map((item, index) => (\n                <tr key={item._id}>\n                  <td>{index + 1}</td>\n                  <td>{item.name}</td>\n                  <td>{item.price}</td>\n                  <td>{item.cart_qty}</td>\n                  <td>{item.price * item.cart_qty} LKR</td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleCartModalClose}>\n            Close\n          </Button>\n          <Button\n            variant=\"danger\"\n            onClick={() => {\n              localStorage.setItem(\"cart\", JSON.stringify([]));\n              handleCartModalClose();\n            }}\n          >\n            Clear Cart\n          </Button>\n          <Button variant=\"primary\" onClick={handleCheckout}>\n            Checkout ({cartFullTotal})\n          </Button>\n        </Modal.Footer>\n      </Modal>\n\n      <Modal show={showPaymentModal} onHide={handleCheckoutClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>Payment</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          {/*<Form.Group className=\"mb-3\" controlId=\"ownerNameGroup\">\n            <Form.Label>Owner Name</Form.Label>\n            <Form.Control required type=\"text\" placeholder=\"Enter owner name\" />\n          </Form.Group>*/}\n          <Form.Group className=\"mb-3\" controlId=\"deliveryAddressGroup\">\n            <Form.Label>Delivery Address</Form.Label>\n            <Form.Control\n              required\n              type=\"text\"\n              placeholder=\"Enter delivery address\"\n              onChange={(e) => {\n                setShipping(e.target.value);\n                console.log(shipping);\n              }}\n            />\n          </Form.Group>\n        </Modal.Body>\n        {/* <Form.Group className=\"mb-3\" controlId=\"cardNumberGroup\">\n            <Form.Label>Card Number</Form.Label>\n            <Form.Control\n              required\n              type=\"text\"\n              placeholder=\"Enter card number\"\n            />\n          </Form.Group>\n          <Form.Group className=\"mb-3\" controlId=\"cardYearGroup\">\n            <Form.Label>Year</Form.Label>\n            <Form.Control required type=\"number\" placeholder=\"Enter Year\" />\n          </Form.Group>\n          <Form.Group className=\"mb-3\" controlId=\"cardMonthGroup\">\n            <Form.Label>Month</Form.Label>\n            <Form.Control required type=\"text\" placeholder=\"Enter month\" />\n          </Form.Group>\n          <Form.Group className=\"mb-3\" controlId=\"cvcGroup\">\n            <Form.Label>CVC</Form.Label>\n            <Form.Control required type=\"text\" placeholder=\"Enter cvc\" />\n          </Form.Group>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleCheckoutClose}>\n            Close\n          </Button>*/}\n        {/* {transaction && (\n          <Modal.Footer>\n            <Button\n              variant=\"primary\"\n              onClick={async () => {\n                handleCheckoutClose();\n\n                Notiflix.Loading.standard(\"Payment Processing\");\n\n                await axios.post(getUrl(\"addOrder\"), {\n                  cart: localStorage.getItem(\"cart\"),\n                  user: getUserData().id,\n                  total: cartFullTotal,\n                  address: shipping,\n                });\n                localStorage.setItem(\"cart\", JSON.stringify([]));\n                Notiflix.Loading.remove();\n                getList();\n              }}\n            >\n              Pay\n            </Button>\n          </Modal.Footer>\n        )}*/}\n        <Container>\n          <PayPalButton\n            amount={(cartFullTotal / 360).toFixed(2)}\n            shippingPreference=\"NO_SHIPPING\" // default is \"GET_FROM_FILE\"\n            onSuccess={async (details) => {\n              //alert(\n              // \"Transaction completed by \" + details.payer.name.given_name\n              //);\n              Swal.fire({\n                icon: \"warning\",\n                title:\n                  \"Transaction completed by \" + details.payer.name.given_name,\n              });\n              handleCheckoutClose();\n              Notiflix.Loading.standard(\"Payment Processing\");\n              await axios.post(getUrl(\"addOrder\"), {\n                cart: localStorage.getItem(\"cart\"),\n                user: getUserData().id,\n                total: cartFullTotal,\n                address: shipping,\n              });\n              localStorage.setItem(\"cart\", JSON.stringify([]));\n              Notiflix.Loading.remove();\n              getList();\n              Swal.fire({\n                icon: \"success\",\n                title: \"Payment Succuss! \", //+ details.payer.name.given_name,\n              });\n            }}\n            options={{\n              clientId:\n                \"AWSlYfZ8E8WQJ3zhbEEVxCEkcADqV0E_L1wcydgijdeWJqCOGN31zVXXQ4ZPOVO3uKlhnMsqjhOPuUvF\",\n              currency: \"USD\",\n            }}\n          />\n        </Container>\n      </Modal>\n    </>\n  );\n};\n\nexport default Home;\n","C:\\Users\\User\\Desktop\\EasyAgro-final\\EasyAgro-fyp-attempt-3\\client\\src\\components\\admin\\adminadvisors.jsx",["276","277","278","279","280","281","282","283","284","285","286","287","288"],[],"import { useState, useEffect, React } from \"react\";\nimport Header from \"./common/header\";\nimport Notiflix from \"notiflix\";\nimport Swal from \"sweetalert2\";\nimport {\n  Col,\n  Table,\n  Container,\n  Row,\n  Badge,\n  Form,\n  Button,\n  Alert,\n} from \"react-bootstrap\";\n\nimport getUrl from \"../../utils/routes\";\nimport axios from \"axios\";\nimport Footer from \"./common/footer\";\n\nconst AdminAdvisors = () => {\n  const [list, setList] = useState([]);\n\n  const getUserData = () => {\n    return JSON.parse(localStorage.getItem(\"user\"));\n  };\n\n  const handleEnrollment = async (e) => {\n    e.preventDefault();\n    try {\n      console.log(data);\n      Notiflix.Loading.standard();\n      data[\"user\"] = getUserData().id;\n      await axios.post(getUrl(\"newQuestion\"), data);\n      setData(initialData);\n      setError({\n        message: \"Advice Processed Successfully\",\n        color: \"success\",\n      });\n      Notiflix.Loading.remove();\n      getList();\n    } catch (error) {\n      Notiflix.Loading.remove();\n      console.log(error);\n      if (\n        error.response &&\n        (error.response.status === 400 || error.response.status === 401)\n      ) {\n        setError({\n          message: error.response.data.message,\n          color: \"danger\",\n        });\n      }\n    }\n  };\n\n  const getList = async () => {\n    Notiflix.Loading.standard(\"Loading Advises\");\n\n    let isadmin = 2;\n\n    if (getUserData().usertype == 1 || getUserData.usertype == 2) {\n      isadmin = 1;\n    }\n\n    let resp = await axios.post(getUrl(\"listQuestion\"), {\n      isadmin: isadmin,\n      user: getUserData().id,\n    });\n\n    console.log(resp.data);\n    setList(resp.data);\n    Notiflix.Loading.remove();\n  };\n\n  useEffect(() => {\n    getList();\n  }, []);\n\n  const initialData = {\n    message: \"\",\n    status: 1,\n  };\n\n  const [data, setData] = useState(initialData);\n\n  const [isnew, setIsnew] = useState(true);\n  const [recordid, setRecordid] = useState(0);\n\n  const [error, setError] = useState({\n    message: \"\",\n    color: \"success\",\n  });\n\n  const handleChange = ({ currentTarget: input }) => {\n    setData({ ...data, [input.name]: input.value });\n  };\n\n  const reply = async (idRecord) => {\n    Swal.fire({\n      title: \"Reply\",\n      input: \"text\",\n      inputAttributes: {\n        autocapitalize: \"off\",\n      },\n      showCancelButton: true,\n      confirmButtonText: \"Submit\",\n      showLoaderOnConfirm: true,\n      preConfirm: (replytext) => {\n        return replytext;\n      },\n      allowOutsideClick: () => !Swal.isLoading(),\n    }).then(async (replytext) => {\n      if (replytext.value != \"\") {\n        try {\n          Notiflix.Loading.standard();\n          await axios.post(getUrl(\"replyQuestion\"), {\n            id: idRecord,\n            reply: replytext.value,\n            staff: getUserData().id,\n          });\n          setError({\n            message: \"Reply Processed Successfully\",\n            color: \"success\",\n          });\n          Notiflix.Loading.remove();\n          getList();\n        } catch (error) {\n          Notiflix.Loading.remove();\n          console.log(error);\n          if (\n            error.response &&\n            (error.response.status === 400 || error.response.status === 401)\n          ) {\n            setError({\n              message: error.response.data.message,\n              color: \"danger\",\n            });\n          }\n        }\n      }\n    });\n  };\n\n  return (\n    <>\n      <Header />\n      <Container fluid style={{ marginBottom: \"90px\" }}>\n        <Row className=\"justify-content-center mt-5\">\n          <Col\n            md={9}\n            sm={12}\n            className=\"shadow-sm text-success mt-5 p-4 rounded\"\n          >\n            <h6 className=\" text-success pb-4\">Question List</h6>\n            <Table striped bordered hover>\n              <thead>\n                <tr>\n                  <th>#</th>\n                  {/*<th>NIC</th>\n                  <th>Name</th>*/}\n                  <th>Question</th>\n                  <th>Answer</th>\n\n                  {(getUserData().usertype == 1 ||\n                    getUserData().usertype == 2) && <th>Actions</th>}\n                </tr>\n              </thead>\n              <tbody>\n                {list.length == 0 && (\n                  <tr className=\"text-center\">\n                    <td className=\"text-danger\" colSpan={4}>\n                      No Data Found\n                    </td>\n                  </tr>\n                )}\n                {list.map((item, index) => (\n                  <tr key={item._id}>\n                    <td>{index + 1}</td>\n                    {/*<td>{item.user}</td>\n                    <td>{item.name}</td>*/}\n                    <td>{item.message}</td>\n                    <td>{item.reply}</td>\n                    {(getUserData().usertype == 1 ||\n                      getUserData().usertype == 2) && (\n                      <td>\n                        <Button\n                          className=\"mx-1\"\n                          variant=\"primary\"\n                          size=\"sm\"\n                          onClick={() => {\n                            reply(item._id);\n                          }}\n                        >\n                          Reply\n                        </Button>\n                      </td>\n                    )}\n                  </tr>\n                ))}\n              </tbody>\n            </Table>\n          </Col>\n          {getUserData().usertype == 3 && (\n            <Col\n              md={3}\n              sm={12}\n              className=\"shadow-sm text-success mt-5 p-4 rounded\"\n            >\n              <h6 className=\" text-success pb-4\">Ask Question</h6>\n\n              <Form className=\"text-start\" onSubmit={handleEnrollment}>\n                <Form.Group className=\"mb-3\" controlId=\"nameGroup\">\n                  <Form.Label>Your Question</Form.Label>\n                  <Form.Control\n                    onChange={handleChange}\n                    required\n                    placeholder=\"Enter your question\"\n                    name=\"message\"\n                    value={data.message}\n                    as=\"textarea\"\n                    rows={3}\n                  />\n                </Form.Group>\n                {error && error.message && (\n                  <Alert key={error.color} variant={error.color}>\n                    {error.message}\n                  </Alert>\n                )}\n                <Button\n                  className=\"mt-4 w-100\"\n                  variant={isnew ? \"success\" : \"warning\"}\n                  type=\"submit\"\n                >\n                  {isnew ? \"Submit\" : \"Update\"}\n                </Button>\n                <Button\n                  className=\"mt-4 w-100\"\n                  variant=\"danger\"\n                  type=\"button\"\n                  onClick={() => {\n                    setData(initialData);\n                    setIsnew(true);\n                  }}\n                >\n                  Reset\n                </Button>\n              </Form>\n            </Col>\n          )}\n        </Row>\n      </Container>\n      <Footer></Footer>\n    </>\n  );\n};\n\nexport default AdminAdvisors;\n","C:\\Users\\User\\Desktop\\EasyAgro-final\\EasyAgro-fyp-attempt-3\\client\\src\\components\\admin\\categories.jsx",["289","290","291"],[],"import { useState, useEffect, React } from \"react\";\nimport Header from \"./common/header\";\nimport Notiflix from \"notiflix\";\nimport Swal from \"sweetalert2\";\nimport {\n  Col,\n  Table,\n  Container,\n  Row,\n  Badge,\n  Form,\n  Button,\n  Alert,\n} from \"react-bootstrap\";\n\nimport getUrl from \"../../utils/routes\";\nimport axios from \"axios\";\nimport Footer from \"./common/footer\";\n\nconst Categories = () => {\n  const [list, setList] = useState([]);\n\n  const handleEnrollment = async (e) => {\n    e.preventDefault();\n    try {\n      console.log(data);\n      Notiflix.Loading.standard();\n      if (isnew === false) {\n        data[\"id\"] = recordid;\n      }\n      await axios.post(\n        getUrl(isnew === true ? \"addCategory\" : \"updateCategory\"),\n        data\n      );\n      setData(initialData);\n      setIsnew(true);\n      setError({\n        message: \"Category Processed Successfully\",\n        color: \"success\",\n      });\n      Notiflix.Loading.remove();\n      getList();\n    } catch (error) {\n      console.log(error);\n      if (\n        error.response &&\n        (error.response.status === 400 || error.response.status === 401)\n      ) {\n        setError({\n          message: error.response.data.message,\n          color: \"danger\",\n        });\n      }\n    }\n  };\n\n  const getList = async () => {\n    Notiflix.Loading.standard(\"Loading Categories\");\n    let resp = await axios.post(getUrl(\"listCategory\"));\n    setList(resp.data);\n    Notiflix.Loading.remove();\n  };\n\n  useEffect(() => {\n    getList();\n  }, []);\n\n  const initialData = {\n    name: \"\",\n    status: 1,\n  };\n\n  const [data, setData] = useState(initialData);\n\n  const [isnew, setIsnew] = useState(true);\n  const [recordid, setRecordid] = useState(0);\n\n  const [error, setError] = useState({\n    message: \"\",\n    color: \"success\",\n  });\n\n  const handleChange = ({ currentTarget: input }) => {\n    setData({ ...data, [input.name]: input.value });\n  };\n\n  const handleDelete = async (record) => {\n    Swal.fire({\n      title: \"Are you sure to delete this record\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: \"Yes\",\n    }).then(async (result) => {\n      Notiflix.Loading.standard();\n      await axios.post(getUrl(\"deleteCategory\"), { id: record });\n      Notiflix.Loading.remove();\n      getList();\n    });\n  };\n\n  const handleGet = async (record) => {\n    Swal.fire({\n      title: \"Are you sure to edit this record\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: \"Yes\",\n    }).then(async (result) => {\n      Notiflix.Loading.standard();\n      let response = await axios.post(getUrl(\"getCategory\"), { id: record });\n      if (response.status === 200) {\n        setIsnew(false);\n        setRecordid(response.data._id);\n        setData({\n          name: response.data.name,\n          status: response.data.status,\n        });\n      }\n      Notiflix.Loading.remove();\n    });\n  };\n\n  return (\n    <>\n      <Header />\n      <Container fluid style={{ marginBottom: \"90px\" }}>\n        <Row className=\"justify-content-center mt-5\">\n          <Col\n            md={9}\n            sm={12}\n            className=\"shadow-sm text-success mt-5 p-4 rounded\"\n          >\n            <h6 className=\" text-success pb-4\">Categories List</h6>\n            <Table striped bordered hover>\n              <thead>\n                <tr>\n                  <th>#</th>\n                  <th>Category Name</th>\n                  <th>Status</th>\n                  <th>Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {list.length == 0 && (\n                  <tr className=\"text-center\">\n                    <td className=\"text-danger\" colSpan={4}>\n                      No Data Found\n                    </td>\n                  </tr>\n                )}\n                {list.map((item, index) => (\n                  <tr key={item._id}>\n                    <td>{index + 1}</td>\n                    <td>{item.name}</td>\n                    <td>\n                      <Badge bg={item.status == 1 ? \"success\" : \"danger\"}>\n                        {item.status == 1 ? \"Active\" : \"Inactive\"}\n                      </Badge>\n                    </td>\n                    <td>\n                      <Button\n                        className=\"mx-1\"\n                        variant=\"primary\"\n                        size=\"sm\"\n                        onClick={() => handleGet(item._id)}\n                      >\n                        Edit\n                      </Button>\n                      <Button\n                        className=\"mx-1\"\n                        variant=\"danger\"\n                        size=\"sm\"\n                        onClick={() => handleDelete(item._id)}\n                      >\n                        Delete\n                      </Button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </Table>\n          </Col>\n          <Col\n            md={3}\n            sm={12}\n            className=\"shadow-sm text-success mt-5 p-4 rounded\"\n          >\n            <h6 className=\" text-success pb-4\">Add / Update Categories</h6>\n\n            <Form className=\"text-start\" onSubmit={handleEnrollment}>\n              <Form.Group className=\"mb-3\" controlId=\"nameGroup\">\n                <Form.Label>Category Name</Form.Label>\n                <Form.Control\n                  onChange={handleChange}\n                  required\n                  name=\"name\"\n                  value={data.name}\n                  type=\"text\"\n                  placeholder=\"Enter category name\"\n                />\n              </Form.Group>\n              <Form.Group className=\"mb-3\" controlId=\"statusGroup\">\n                <Form.Label>Status</Form.Label>\n                <Form.Select\n                  onChange={handleChange}\n                  name=\"status\"\n                  aria-label=\"Default select example\"\n                  value={data.status}\n                >\n                  <option value={1}>Active</option>\n                  <option value={2}>Inactive</option>\n                </Form.Select>\n              </Form.Group>\n              {error && error.message && (\n                <Alert key={error.color} variant={error.color}>\n                  {error.message}\n                </Alert>\n              )}\n              <Button\n                className=\"mt-4 w-100\"\n                variant={isnew ? \"success\" : \"warning\"}\n                type=\"submit\"\n              >\n                {isnew ? \"Submit\" : \"Update\"}\n              </Button>\n              <Button\n                className=\"mt-4 w-100\"\n                variant=\"danger\"\n                type=\"button\"\n                onClick={() => {\n                  setData(initialData);\n                  setIsnew(true);\n                }}\n              >\n                Reset\n              </Button>\n            </Form>\n          </Col>\n        </Row>\n      </Container>\n      <Footer></Footer>\n    </>\n  );\n};\n\nexport default Categories;\n","C:\\Users\\User\\Desktop\\EasyAgro-final\\EasyAgro-fyp-attempt-3\\client\\src\\components\\admin\\announcements.jsx",["292","293","294"],[],"import { useState, useEffect, React } from \"react\";\nimport Header from \"./common/header\";\nimport Notiflix from \"notiflix\";\nimport Swal from \"sweetalert2\";\nimport {\n  Col,\n  Table,\n  Container,\n  Row,\n  Badge,\n  Form,\n  Button,\n  Alert,\n} from \"react-bootstrap\";\n\nimport getUrl from \"../../utils/routes\";\nimport axios from \"axios\";\nimport Footer from \"./common/footer\";\n\nconst Announcement = () => {\n  const [list, setList] = useState([]);\n\n  const handleEnrollment = async (e) => {\n    e.preventDefault();\n    try {\n      console.log(data);\n      Notiflix.Loading.standard();\n      if (isnew === false) {\n        data[\"id\"] = recordid;\n      }\n      await axios.post(\n        getUrl(isnew === true ? \"addAnnouncement\" : \"updateAnnouncement\"),\n        data\n      );\n      setData(initialData);\n      setIsnew(true);\n      setError({\n        message: \"Announcement Processed Successfully\",\n        color: \"success\",\n      });\n      Notiflix.Loading.remove();\n      getList();\n    } catch (error) {\n      console.log(error);\n      if (\n        error.response &&\n        (error.response.status === 400 || error.response.status === 401)\n      ) {\n        setError({\n          message: error.response.data.message,\n          color: \"danger\",\n        });\n      }\n    }\n  };\n\n  const getList = async () => {\n    Notiflix.Loading.standard(\"Loading Events\");\n    let resp = await axios.post(getUrl(\"listAnnouncement\"));\n    setList(resp.data);\n    Notiflix.Loading.remove();\n  };\n\n  useEffect(() => {\n    getList();\n  }, []);\n\n  const initialData = {\n    title: \"\",\n    description: \"\",\n    status: 1,\n  };\n\n  const [data, setData] = useState(initialData);\n\n  const [isnew, setIsnew] = useState(true);\n  const [recordid, setRecordid] = useState(0);\n\n  const [error, setError] = useState({\n    message: \"\",\n    color: \"success\",\n  });\n\n  const handleChange = ({ currentTarget: input }) => {\n    setData({ ...data, [input.name]: input.value });\n  };\n\n  const handleDelete = async (record) => {\n    Swal.fire({\n      title: \"Are you sure to delete this record\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: \"Yes\",\n    }).then(async (result) => {\n      Notiflix.Loading.standard();\n      await axios.post(getUrl(\"deleteAnnouncement\"), { id: record });\n      Notiflix.Loading.remove();\n      getList();\n    });\n  };\n\n  const handleGet = async (record) => {\n    Swal.fire({\n      title: \"Are you sure to edit this record\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: \"Yes\",\n    }).then(async (result) => {\n      Notiflix.Loading.standard();\n      let response = await axios.post(getUrl(\"getAnnouncement\"), {\n        id: record,\n      });\n      if (response.status === 200) {\n        setIsnew(false);\n        setRecordid(response.data._id);\n        setData({\n          title: response.data.title,\n          description: response.data.description,\n          status: response.data.status,\n        });\n      }\n      Notiflix.Loading.remove();\n    });\n  };\n\n  return (\n    <>\n      <Header />\n      <Container fluid style={{ marginBottom: \"90px\" }}>\n        <Row className=\"justify-content-center mt-5\">\n          <Col\n            md={9}\n            sm={12}\n            className=\"shadow-sm text-success mt-5 p-4 rounded\"\n          >\n            <h6 className=\" text-success pb-4\">Announcement List</h6>\n            <Table striped bordered hover>\n              <thead>\n                <tr>\n                  <th>#</th>\n                  <th>Title</th>\n                  <th>Status</th>\n                  <th>Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {list.length == 0 && (\n                  <tr className=\"text-center\">\n                    <td className=\"text-danger\" colSpan={4}>\n                      No Data Found\n                    </td>\n                  </tr>\n                )}\n                {list.map((item, index) => (\n                  <tr key={item._id}>\n                    <td>{index + 1}</td>\n                    <td>{item.title}</td>\n                    <td>\n                      <Badge bg={item.status == 1 ? \"success\" : \"danger\"}>\n                        {item.status == 1 ? \"Active\" : \"Inactive\"}\n                      </Badge>\n                    </td>\n                    <td>\n                      <Button\n                        className=\"mx-1\"\n                        variant=\"primary\"\n                        size=\"sm\"\n                        onClick={() => handleGet(item._id)}\n                      >\n                        Edit\n                      </Button>\n                      <Button\n                        className=\"mx-1\"\n                        variant=\"danger\"\n                        size=\"sm\"\n                        onClick={() => handleDelete(item._id)}\n                      >\n                        Delete\n                      </Button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </Table>\n          </Col>\n          <Col\n            md={3}\n            sm={12}\n            className=\"shadow-sm text-success mt-5 p-4 rounded\"\n          >\n            <h6 className=\" text-success pb-4\">Add / Update Announcement</h6>\n\n            <Form className=\"text-start\" onSubmit={handleEnrollment}>\n              <Form.Group className=\"mb-3\" controlId=\"nameGroup\">\n                <Form.Label>Announcement Title</Form.Label>\n                <Form.Control\n                  onChange={handleChange}\n                  required\n                  name=\"title\"\n                  value={data.title}\n                  type=\"text\"\n                  placeholder=\"Enter announcement title\"\n                />\n              </Form.Group>\n              <Form.Group className=\"mb-3\" controlId=\"descriptionGroup\">\n                <Form.Label>Content</Form.Label>\n                <Form.Control\n                  onChange={handleChange}\n                  required\n                  placeholder=\"Enter announcement content\"\n                  name=\"description\"\n                  value={data.description}\n                  as=\"textarea\"\n                  rows={3}\n                />\n              </Form.Group>\n              <Form.Group className=\"mb-3\" controlId=\"statusGroup\">\n                <Form.Label>Status</Form.Label>\n                <Form.Select\n                  onChange={handleChange}\n                  name=\"status\"\n                  aria-label=\"Default select example\"\n                  value={data.status}\n                >\n                  <option value={1}>Active</option>\n                  <option value={2}>Inactive</option>\n                </Form.Select>\n              </Form.Group>\n              {error && error.message && (\n                <Alert key={error.color} variant={error.color}>\n                  {error.message}\n                </Alert>\n              )}\n              <Button\n                className=\"mt-4 w-100\"\n                variant={isnew ? \"success\" : \"warning\"}\n                type=\"submit\"\n              >\n                {isnew ? \"Submit\" : \"Update\"}\n              </Button>\n              <Button\n                className=\"mt-4 w-100\"\n                variant=\"danger\"\n                type=\"button\"\n                onClick={() => {\n                  setData(initialData);\n                  setIsnew(true);\n                }}\n              >\n                Reset\n              </Button>\n            </Form>\n          </Col>\n        </Row>\n      </Container>\n      <Footer></Footer>\n    </>\n  );\n};\n\nexport default Announcement;\n","C:\\Users\\User\\Desktop\\EasyAgro-final\\EasyAgro-fyp-attempt-3\\client\\src\\components\\admin\\events.jsx",["295","296","297","298"],[],"import { useState, useEffect, React } from \"react\";\nimport Header from \"./common/header\";\nimport Notiflix from \"notiflix\";\nimport Moment from \"moment\";\nimport Swal from \"sweetalert2\";\nimport {\n  Col,\n  Table,\n  Container,\n  Row,\n  Badge,\n  Modal,\n  Form,\n  Button,\n  Alert,\n} from \"react-bootstrap\";\n\nimport getUrl from \"../../utils/routes\";\nimport axios from \"axios\";\nimport Footer from \"./common/footer\";\n\nconst Events = () => {\n  const [list, setList] = useState([]);\n  const [showmodal, setShowmodal] = useState(false);\n  const [paticipatients, setPaticipatients] = useState([]);\n\n  const handleEnrollment = async (e) => {\n    e.preventDefault();\n    try {\n      console.log(data);\n      Notiflix.Loading.standard();\n      if (isnew === false) {\n        data[\"id\"] = recordid;\n      }\n      await axios.post(\n        getUrl(isnew === true ? \"addEvent\" : \"updateEvent\"),\n        data\n      );\n      setData(initialData);\n      setIsnew(true);\n      setError({\n        message: \"Event Processed Successfully\",\n        color: \"success\",\n      });\n      Notiflix.Loading.remove();\n      getList();\n    } catch (error) {\n      console.log(error);\n      if (\n        error.response &&\n        (error.response.status === 400 || error.response.status === 401)\n      ) {\n        setError({\n          message: error.response.data.message,\n          color: \"danger\",\n        });\n      }\n    }\n  };\n\n  const getList = async () => {\n    Notiflix.Loading.standard(\"Loading Events\");\n    let resp = await axios.post(getUrl(\"listEvent\"));\n    setList(resp.data);\n    Notiflix.Loading.remove();\n  };\n\n  useEffect(() => {\n    getList();\n  }, []);\n\n  const initialData = {\n    title: \"\",\n    description: \"\",\n    startdatetime: \"\",\n    status: 1,\n  };\n\n  const [data, setData] = useState(initialData);\n\n  const [isnew, setIsnew] = useState(true);\n  const [recordid, setRecordid] = useState(0);\n\n  const [error, setError] = useState({\n    message: \"\",\n    color: \"success\",\n  });\n\n  const handleChange = ({ currentTarget: input }) => {\n    setData({ ...data, [input.name]: input.value });\n  };\n\n  const handleDelete = async (record) => {\n    Swal.fire({\n      title: \"Are you sure to delete this record\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: \"Yes\",\n    }).then(async (result) => {\n      Notiflix.Loading.standard();\n      await axios.post(getUrl(\"deleteEvent\"), { id: record });\n      Notiflix.Loading.remove();\n      getList();\n    });\n  };\n\n  const handleGet = async (record) => {\n    Swal.fire({\n      title: \"Are you sure to edit this record\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: \"Yes\",\n    }).then(async (result) => {\n      Notiflix.Loading.standard();\n      let response = await axios.post(getUrl(\"getEvent\"), { id: record });\n      if (response.status === 200) {\n        setIsnew(false);\n        setRecordid(response.data._id);\n        setData({\n          title: response.data.title,\n          description: response.data.description,\n          startdatetime: response.data.startdatetime,\n          status: response.data.status,\n        });\n      }\n      Notiflix.Loading.remove();\n    });\n  };\n\n  const getPaticipatients = async (eventid) => {\n    Notiflix.Loading.standard();\n    let response = await axios.post(getUrl(\"getEventParticipatients\"), {\n      event: eventid,\n    });\n    setPaticipatients(response.data);\n    Notiflix.Loading.remove();\n    setShowmodal(true);\n  };\n\n  return (\n    <>\n      <Header />\n      <Container fluid style={{ marginBottom: \"90px\" }}>\n        <Row className=\"justify-content-center mt-5\">\n          <Col\n            md={9}\n            sm={12}\n            className=\"shadow-sm text-success mt-5 p-4 rounded\"\n          >\n            <h6 className=\" text-success pb-4\">Events List</h6>\n            <Table striped bordered hover>\n              <thead>\n                <tr>\n                  <th>#</th>\n                  <th>Title</th>\n                  <th>Slot</th>\n                  <th>Status</th>\n                  <th>Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {list.length == 0 && (\n                  <tr className=\"text-center\">\n                    <td className=\"text-danger\" colSpan={5}>\n                      No Data Found\n                    </td>\n                  </tr>\n                )}\n                {list.map((item, index) => (\n                  <tr key={item._id}>\n                    <td>{index + 1}</td>\n                    <td>{item.title}</td>\n                    <td>\n                      {Moment(item.startdatetime).format(\"D/MM/Y hh:mm A\")}\n                    </td>\n                    <td>\n                      <Badge bg={item.status == 1 ? \"success\" : \"danger\"}>\n                        {item.status == 1 ? \"Active\" : \"Inactive\"}\n                      </Badge>\n                    </td>\n                    <td>\n                      <Button\n                        className=\"mx-1\"\n                        variant=\"warning\"\n                        size=\"sm\"\n                        onClick={() => getPaticipatients(item._id)}\n                      >\n                        Partipatients\n                      </Button>\n                      <Button\n                        className=\"mx-1\"\n                        variant=\"primary\"\n                        size=\"sm\"\n                        onClick={() => handleGet(item._id)}\n                      >\n                        Edit\n                      </Button>\n                      <Button\n                        className=\"mx-1\"\n                        variant=\"danger\"\n                        size=\"sm\"\n                        onClick={() => handleDelete(item._id)}\n                      >\n                        Delete\n                      </Button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </Table>\n          </Col>\n          <Col\n            md={3}\n            sm={12}\n            className=\"shadow-sm text-success mt-5 p-4 rounded\"\n          >\n            <h6 className=\" text-success pb-4\">Add / Update Events</h6>\n\n            <Form className=\"text-start\" onSubmit={handleEnrollment}>\n              <Form.Group className=\"mb-3\" controlId=\"nameGroup\">\n                <Form.Label>Event Name</Form.Label>\n                <Form.Control\n                  onChange={handleChange}\n                  required\n                  name=\"title\"\n                  value={data.title}\n                  type=\"text\"\n                  placeholder=\"Enter event title\"\n                />\n              </Form.Group>\n              <Form.Group className=\"mb-3\" controlId=\"startdatetimeGroup\">\n                <Form.Label>Event Date & Time</Form.Label>\n                <Form.Control\n                  onChange={handleChange}\n                  required\n                  name=\"startdatetime\"\n                  value={data.startdatetime}\n                  type=\"datetime-local\"\n                  placeholder=\"Enter event date and time\"\n                />\n              </Form.Group>\n              <Form.Group className=\"mb-3\" controlId=\"descriptionGroup\">\n                <Form.Label>Description</Form.Label>\n                <Form.Control\n                  onChange={handleChange}\n                  required\n                  placeholder=\"Enter event remark\"\n                  name=\"description\"\n                  value={data.description}\n                  as=\"textarea\"\n                  rows={3}\n                />\n              </Form.Group>\n              <Form.Group className=\"mb-3\" controlId=\"statusGroup\">\n                <Form.Label>Status</Form.Label>\n                <Form.Select\n                  onChange={handleChange}\n                  name=\"status\"\n                  aria-label=\"Default select example\"\n                  value={data.status}\n                >\n                  <option value={1}>Active</option>\n                  <option value={2}>Inactive</option>\n                </Form.Select>\n              </Form.Group>\n              {error && error.message && (\n                <Alert key={error.color} variant={error.color}>\n                  {error.message}\n                </Alert>\n              )}\n              <Button\n                className=\"mt-4 w-100\"\n                variant={isnew ? \"success\" : \"warning\"}\n                type=\"submit\"\n              >\n                {isnew ? \"Submit\" : \"Update\"}\n              </Button>\n              <Button\n                className=\"mt-4 w-100\"\n                variant=\"danger\"\n                type=\"button\"\n                onClick={() => {\n                  setData(initialData);\n                  setIsnew(true);\n                }}\n              >\n                Reset\n              </Button>\n            </Form>\n          </Col>\n        </Row>\n        <Modal\n          show={showmodal}\n          onHide={() => {\n            setShowmodal(false);\n          }}\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>Paticipatients</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Table striped bordered hover>\n              <thead>\n                <tr>\n                  <th>#</th>\n                  <th>NIC</th>\n                </tr>\n              </thead>\n              <tbody>\n                {list.length == 0 && (\n                  <tr className=\"text-center\">\n                    <td className=\"text-danger\" colSpan={2}>\n                      No Data Found\n                    </td>\n                  </tr>\n                )}\n                {paticipatients.map((item, index) => (\n                  <tr key={item._id}>\n                    <td>{index + 1}</td>\n                    <td>{item.nic}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </Table>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button\n              variant=\"secondary\"\n              onClick={() => {\n                setShowmodal(false);\n              }}\n            >\n              Close\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </Container>\n      <Footer></Footer>\n    </>\n  );\n};\n\nexport default Events;\n","C:\\Users\\User\\Desktop\\EasyAgro-final\\EasyAgro-fyp-attempt-3\\client\\src\\components\\admin\\loan.jsx",["299","300","301","302","303","304","305","306","307"],[],"import { useState, useEffect, React } from \"react\";\nimport Header from \"./common/header\";\nimport Notiflix from \"notiflix\";\nimport Swal from \"sweetalert2\";\nimport {\n  Col,\n  Table,\n  Container,\n  Row,\n  Badge,\n  Form,\n  Button,\n  Alert,\n} from \"react-bootstrap\";\n\nimport getUrl from \"../../utils/routes\";\nimport axios from \"axios\";\nimport Footer from \"./common/footer\";\n\nconst Loan = () => {\n  const [list, setList] = useState([]);\n\n  const handleEnrollment = async (e) => {\n    e.preventDefault();\n    try {\n      data[\"user\"] = getUserData().id;\n      Notiflix.Loading.standard();\n      await axios.post(getUrl(\"addLoan\"), data);\n      setData(initialData);\n      setError({\n        message: \"Loan Processed Successfully\",\n        color: \"success\",\n      });\n      Notiflix.Loading.remove();\n      getList();\n    } catch (error) {\n      Notiflix.Loading.remove();\n      console.log(error);\n      if (\n        error.response &&\n        (error.response.status === 400 || error.response.status === 401)\n      ) {\n        setError({\n          message: error.response.data.message,\n          color: \"danger\",\n        });\n      }\n    }\n  };\n\n  const getList = async () => {\n    Notiflix.Loading.standard(\"Loading Loan Records\");\n\n    let isadmin = 2;\n\n    if (getUserData().usertype == 1 || getUserData.usertype == 2) {\n      isadmin = 1;\n    }\n\n    let resp = await axios.post(getUrl(\"listLoan\"), {\n      isadmin: isadmin,\n      user: getUserData().id,\n    });\n    console.log(resp.data);\n    setList(resp.data);\n    Notiflix.Loading.remove();\n  };\n\n  useEffect(() => {\n    getList();\n  }, []);\n\n  const getUserData = () => {\n    return JSON.parse(localStorage.getItem(\"user\"));\n  };\n\n  const initialData = {\n    reason: \"\",\n    user: getUserData()._id,\n    nic: getUserData().nic,\n    amount: \"\",\n  };\n\n  const [data, setData] = useState(initialData);\n\n  const [error, setError] = useState({\n    message: \"\",\n    color: \"success\",\n  });\n\n  const handleChange = ({ currentTarget: input }) => {\n    setData({ ...data, [input.name]: input.value });\n  };\n\n  const handleDelete = async (record) => {\n    Swal.fire({\n      title: \"Are you sure to delete this record\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: \"Yes\",\n    }).then(async (result) => {\n      Notiflix.Loading.standard();\n      await axios.post(getUrl(\"deleteLoan\"), { id: record });\n      Notiflix.Loading.remove();\n      getList();\n    });\n  };\n\n  const handleApprove = async (record, user) => {\n    Swal.fire({\n      title: \"Are you sure to approve this record\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: \"Yes\",\n    }).then(async (result) => {\n      Notiflix.Loading.standard();\n      await axios.post(getUrl(\"approveLoan\"), {\n        id: record,\n        user: user,\n      });\n      getList();\n      Notiflix.Loading.remove();\n    });\n  };\n\n  const handleReject = async (record, user) => {\n    Swal.fire({\n      title: \"Are you sure to reject this record\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: \"Yes\",\n    }).then(async (result) => {\n      Notiflix.Loading.standard();\n      await axios.post(getUrl(\"rejectLoan\"), {\n        id: record,\n        user: user,\n      });\n      getList();\n      Notiflix.Loading.remove();\n    });\n  };\n\n  return (\n    <>\n      <Header />\n      <Container fluid style={{ marginBottom: \"90px\" }}>\n        <Row className=\"justify-content-center mt-5\">\n          <Col\n            md={9}\n            sm={12}\n            className=\"shadow-sm text-success mt-5 p-4 rounded\"\n          >\n            <h6 className=\" text-success pb-4\">Loan List</h6>\n            <Table striped bordered hover>\n              <thead>\n                <tr>\n                  <th>#</th>\n                  <th>User</th>\n                  <th>Reason</th>\n                  <th>Amount(LKR)</th>\n                  <th>Status</th>\n                  {(getUserData().usertype == 1 ||\n                    getUserData().usertype == 2) && <th>Actions</th>}\n                </tr>\n              </thead>\n              <tbody>\n                {list.length == 0 && (\n                  <tr className=\"text-center\">\n                    <td className=\"text-danger\" colSpan={6}>\n                      No Data Found\n                    </td>\n                  </tr>\n                )}\n                {list.map((item, index) => (\n                  <tr key={item._id}>\n                    <td>{index + 1}</td>\n                    <td>{item.nic}</td>\n                    <td>{item.reason}</td>\n                    <td>{item.amount}</td>\n                    <td>\n                      <Badge\n                        bg={[\"success\", \"danger\", \"warning\"][item.status - 1]}\n                      >\n                        {[\"Approved\", \"Rejected\", \"Pending\"][item.status - 1]}\n                      </Badge>\n                    </td>\n\n                    {(getUserData().usertype == 1 ||\n                      getUserData().usertype == 2) && (\n                      <td>\n                        <Container>\n                          <Row style={{ marginBottom: \"5px\" }}>\n                            <Button\n                              className=\"mx-1\"\n                              variant=\"primary\"\n                              size=\"sm\"\n                              onClick={() => handleApprove(item._id, item.user)}\n                            >\n                              Approve\n                            </Button>\n                          </Row>\n                          <Row style={{ marginBottom: \"5px\" }}>\n                            <Button\n                              className=\"mx-1\"\n                              variant=\"secondary\"\n                              size=\"sm\"\n                              onClick={() => handleReject(item._id, item.user)}\n                            >\n                              Reject\n                            </Button>\n                          </Row>\n                          <Row>\n                            <Button\n                              className=\"mx-1\"\n                              variant=\"danger\"\n                              size=\"sm\"\n                              onClick={() => handleDelete(item._id)}\n                            >\n                              Delete\n                            </Button>\n                          </Row>\n                        </Container>\n                      </td>\n                    )}\n                  </tr>\n                ))}\n              </tbody>\n            </Table>\n          </Col>\n          {getUserData().usertype == 3 && (\n            <Col\n              md={3}\n              sm={12}\n              className=\"shadow-sm text-success mt-5 p-4 rounded\"\n            >\n              <h6 className=\" text-success pb-4\">Apply for Loan</h6>\n\n              <Form className=\"text-start\" onSubmit={handleEnrollment}>\n                <Form.Group className=\"mb-3\" controlId=\"loanamountGroup\">\n                  <Form.Label>Loan Amount</Form.Label>\n                  <Form.Control\n                    onChange={handleChange}\n                    required\n                    name=\"amount\"\n                    value={data.amount}\n                    type=\"number\"\n                    placeholder=\"Enter Loan amount\"\n                  />\n                </Form.Group>\n                <Form.Group className=\"mb-3\" controlId=\"titleGroup\">\n                  <Form.Label>Loan Remark</Form.Label>\n                  <Form.Control\n                    onChange={handleChange}\n                    required\n                    name=\"reason\"\n                    value={data.reason}\n                    type=\"text\"\n                    placeholder=\"Enter remark\"\n                  />\n                </Form.Group>\n                {error && error.message && (\n                  <Alert key={error.color} variant={error.color}>\n                    {error.message}\n                  </Alert>\n                )}\n                <Button className=\"mt-4 w-100\" variant=\"success\" type=\"submit\">\n                  Apply For Loan\n                </Button>\n                <Button\n                  className=\"mt-4 w-100\"\n                  variant=\"danger\"\n                  type=\"button\"\n                  onClick={() => {\n                    setData(initialData);\n                  }}\n                >\n                  Reset\n                </Button>\n              </Form>\n            </Col>\n          )}\n        </Row>\n      </Container>\n      <Footer></Footer>\n    </>\n  );\n};\n\nexport default Loan;\n","C:\\Users\\User\\Desktop\\EasyAgro-final\\EasyAgro-fyp-attempt-3\\client\\src\\components\\admin\\products.jsx",["308","309","310"],[],"import { useState, useEffect, React } from \"react\";\nimport Header from \"./common/header\";\nimport Notiflix from \"notiflix\";\nimport Swal from \"sweetalert2\";\nimport {\n  Col,\n  Table,\n  Container,\n  Row,\n  Badge,\n  Form,\n  Button,\n  Alert,\n} from \"react-bootstrap\";\n\nimport getUrl from \"../../utils/routes\";\nimport axios from \"axios\";\nimport Footer from \"./common/footer\";\n\nconst Products = () => {\n  const [list, setList] = useState([]);\n\n  const handleEnrollment = async (e) => {\n    e.preventDefault();\n    try {\n      Notiflix.Loading.standard();\n\n      const formData = new FormData();\n      formData.append(\"name\", data.name);\n      formData.append(\"description\", data.description);\n      formData.append(\"price\", data.price);\n      formData.append(\"quantity\", data.quantity);\n      formData.append(\"image\", image);\n      formData.append(\"status\", data.status);\n      if (isnew === false) {\n        formData.append(\"id\", recordid);\n      }\n      await axios.post(\n        getUrl(\n          isnew === true\n            ? \"addProduct\"\n            : image === \"\"\n            ? \"updateProduct\"\n            : \"updateProductWithImage\"\n        ),\n        formData\n      );\n      setData(initialData);\n      setIsnew(true);\n      setError({\n        message: \"Product Processed Successfully\",\n        color: \"success\",\n      });\n      Notiflix.Loading.remove();\n      getList();\n    } catch (error) {\n      console.log(error);\n      if (\n        error.response &&\n        (error.response.status === 400 || error.response.status === 401)\n      ) {\n        setError({\n          message: error.response.data.message,\n          color: \"danger\",\n        });\n      }\n    }\n  };\n\n  const getList = async () => {\n    Notiflix.Loading.standard(\"Loading Products\");\n    let resp = await axios.post(getUrl(\"listProduct\"));\n    setList(resp.data);\n    Notiflix.Loading.remove();\n  };\n\n  useEffect(() => {\n    getList();\n  }, []);\n\n  const initialData = {\n    name: \"\",\n    description: \"\",\n    price: \"\",\n    quantity: \"\",\n    status: 1,\n  };\n\n  const [data, setData] = useState(initialData);\n\n  const [isnew, setIsnew] = useState(true);\n  const [recordid, setRecordid] = useState(0);\n\n  const [error, setError] = useState({\n    message: \"\",\n    color: \"success\",\n  });\n\n  const handleChange = ({ currentTarget: input }) => {\n    setData({ ...data, [input.name]: input.value });\n  };\n\n  const handleDelete = async (record) => {\n    Swal.fire({\n      title: \"Are you sure to delete this record\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: \"Yes\",\n    }).then(async (result) => {\n      Notiflix.Loading.standard();\n      await axios.post(getUrl(\"deleteProduct\"), { id: record });\n      Notiflix.Loading.remove();\n      getList();\n    });\n  };\n\n  const handleGet = async (record) => {\n    Swal.fire({\n      title: \"Are you sure to edit this record\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: \"Yes\",\n    }).then(async (result) => {\n      Notiflix.Loading.standard();\n      let response = await axios.post(getUrl(\"getProduct\"), { id: record });\n      if (response.status === 200) {\n        setIsnew(false);\n        setRecordid(response.data._id);\n        setData({\n          name: response.data.name,\n          price: response.data.price,\n          description: response.data.description,\n          quantity: response.data.quantity,\n          status: response.data.status,\n        });\n      }\n      Notiflix.Loading.remove();\n    });\n  };\n\n  const [image, setImage] = useState([]);\n\n  const handleImageChange = (e) => {\n    console.log(e.target.files[0]);\n    setImage(e.target.files[0]);\n  };\n\n  return (\n    <>\n      <Header />\n      <Container fluid style={{ marginBottom: \"90px\" }}>\n        <Row className=\"justify-content-center mt-5\">\n          <Col\n            md={9}\n            sm={12}\n            className=\"shadow-sm text-success mt-5 p-4 rounded\"\n          >\n            <h6 className=\" text-success pb-4\">Product List</h6>\n            <Table striped bordered hover>\n              <thead>\n                <tr>\n                  <th>#</th>\n                  <th>Product Name</th>\n                  <th>Price</th>\n                  <th>Available Quantity</th>\n                  <th>Status</th>\n                  <th>Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {list.length == 0 && (\n                  <tr className=\"text-center\">\n                    <td className=\"text-danger\" colSpan={6}>\n                      No Data Found\n                    </td>\n                  </tr>\n                )}\n                {list.map((item, index) => (\n                  <tr key={item._id}>\n                    <td>{index + 1}</td>\n                    <td>{item.name}</td>\n                    <td>{item.price}</td>\n                    <td>{item.quantity}</td>\n                    <td>\n                      <Badge bg={item.status == 1 ? \"success\" : \"danger\"}>\n                        {item.status == 1 ? \"Active\" : \"Inactive\"}\n                      </Badge>\n                    </td>\n                    <td>\n                      <Button\n                        className=\"mx-1\"\n                        variant=\"primary\"\n                        size=\"sm\"\n                        onClick={() => handleGet(item._id)}\n                      >\n                        Edit\n                      </Button>\n                      <Button\n                        className=\"mx-1\"\n                        variant=\"danger\"\n                        size=\"sm\"\n                        onClick={() => handleDelete(item._id)}\n                      >\n                        Delete\n                      </Button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </Table>\n          </Col>\n          <Col\n            md={3}\n            sm={12}\n            className=\"shadow-sm text-success mt-5 p-4 rounded\"\n          >\n            <h6 className=\" text-success pb-4\">Add / Update Product</h6>\n\n            <Form className=\"text-start\" onSubmit={handleEnrollment}>\n              <Form.Group className=\"mb-3\" controlId=\"nameGroup\">\n                <Form.Label>Name</Form.Label>\n                <Form.Control\n                  onChange={handleChange}\n                  required\n                  name=\"name\"\n                  value={data.name}\n                  type=\"text\"\n                  placeholder=\"Enter product name\"\n                />\n              </Form.Group>\n              <Form.Group className=\"mb-3\" controlId=\"descriptionGroup\">\n                <Form.Label>Description</Form.Label>\n                <Form.Control\n                  onChange={handleChange}\n                  required\n                  placeholder=\"Enter product description\"\n                  name=\"description\"\n                  value={data.description}\n                  as=\"textarea\"\n                  rows={3}\n                />\n              </Form.Group>\n              <Form.Group className=\"mb-3\" controlId=\"priceGroup\">\n                <Form.Label>Price</Form.Label>\n                <Form.Control\n                  onChange={handleChange}\n                  required\n                  name=\"price\"\n                  value={data.price}\n                  type=\"number\"\n                  placeholder=\"Enter product price\"\n                />\n              </Form.Group>\n              <Form.Group className=\"mb-3\" controlId=\"quantityGroup\">\n                <Form.Label>Quantity</Form.Label>\n                <Form.Control\n                  onChange={handleChange}\n                  required\n                  name=\"quantity\"\n                  value={data.quantity}\n                  type=\"number\"\n                  placeholder=\"Enter product quantity\"\n                />\n              </Form.Group>\n              <Form.Group className=\"mb-3\" controlId=\"quantityGroup\">\n                <Form.Label>Price</Form.Label>\n                <Form.Control onChange={handleImageChange} type=\"file\" />\n              </Form.Group>\n\n              <Form.Group className=\"mb-3\" controlId=\"statusGroup\">\n                <Form.Label>Status</Form.Label>\n                <Form.Select\n                  onChange={handleChange}\n                  name=\"status\"\n                  aria-label=\"Default select example\"\n                  value={data.status}\n                >\n                  <option value={1}>Active</option>\n                  <option value={2}>Inactive</option>\n                </Form.Select>\n              </Form.Group>\n              {error && error.message && (\n                <Alert key={error.color} variant={error.color}>\n                  {error.message}\n                </Alert>\n              )}\n              <Button\n                className=\"mt-4 w-100\"\n                variant={isnew ? \"success\" : \"warning\"}\n                type=\"submit\"\n              >\n                {isnew ? \"Submit\" : \"Update\"}\n              </Button>\n              <Button\n                className=\"mt-4 w-100\"\n                variant=\"danger\"\n                type=\"button\"\n                onClick={() => {\n                  setData(initialData);\n                  setIsnew(true);\n                }}\n              >\n                Reset\n              </Button>\n            </Form>\n          </Col>\n        </Row>\n      </Container>\n\n      <Footer></Footer>\n    </>\n  );\n};\n\nexport default Products;\n","C:\\Users\\User\\Desktop\\EasyAgro-final\\EasyAgro-fyp-attempt-3\\client\\src\\components\\admin\\orders.jsx",["311","312","313","314","315","316","317","318","319"],[],"import { useState, useEffect, React } from \"react\";\nimport Header from \"./common/header\";\nimport Notiflix from \"notiflix\";\nimport Swal from \"sweetalert2\";\nimport {\n  Col,\n  Table,\n  Container,\n  Row,\n  Modal,\n  Form,\n  Button,\n  Alert,\n} from \"react-bootstrap\";\n\nimport getUrl from \"../../utils/routes\";\nimport axios from \"axios\";\nimport Footer from \"./common/footer\";\n\nconst Categories = () => {\n  const [list, setList] = useState([]);\n  const [show, setShow] = useState(false);\n  const [products, setProducts] = useState([]);\n\n  const getUserData = () => {\n    return JSON.parse(localStorage.getItem(\"user\"));\n  };\n\n  const getList = async () => {\n    Notiflix.Loading.standard(\"Loading Categories\");\n\n    let isadmin = 2;\n\n    if (getUserData().usertype == 1 || getUserData.usertype == 2) {\n      isadmin = 1;\n    }\n\n    let resp = await axios.post(getUrl(\"orderList\"), {\n      isadmin: isadmin,\n      user: getUserData().id,\n    });\n\n    setList(resp.data);\n    Notiflix.Loading.remove();\n  };\n\n  useEffect(() => {\n    getList();\n  }, []);\n\n  const handleGet = async (record) => {\n    setProducts(JSON.parse(record.products));\n    setShow(true);\n  };\n  const handleClose = (record) => {\n    setShow(false);\n  };\n\n  const handleDelete = async (record) => {\n    Swal.fire({\n      title: \"Are you sure to delete this record\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: \"Yes\",\n    }).then(async (result) => {\n      Notiflix.Loading.standard();\n      await axios.post(getUrl(\"orderDelete\"), { id: record });\n      Notiflix.Loading.remove();\n      getList();\n    });\n  };\n\n  return (\n    <>\n      <Header />\n      <Container fluid style={{ marginBottom: \"90px\" }}>\n        <Row className=\"justify-content-center mt-5\">\n          <Col\n            md={9}\n            sm={12}\n            className=\"shadow-sm text-success mt-5 p-4 rounded\"\n          >\n            <h6 className=\" text-success pb-4\">Orders List</h6>\n            <Table striped bordered hover>\n              <thead>\n                <tr>\n                  <th>#</th>\n                  <th>Reference</th>\n                  <th>Delivery Address</th>\n                  <th>Total</th>\n                  <th>Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {list.length == 0 && (\n                  <tr className=\"text-center\">\n                    <td className=\"text-danger\" colSpan={4}>\n                      No Data Found\n                    </td>\n                  </tr>\n                )}\n                {list.map((item, index) => (\n                  <tr key={item._id}>\n                    <td>{index + 1}</td>\n                    <td>{item.ref}</td>\n                    <td>{item.address}</td>\n                    <td>{item.total}</td>\n                    <td>\n                      <Button\n                        className=\"mx-1\"\n                        variant=\"primary\"\n                        size=\"sm\"\n                        onClick={() => handleGet(item)}\n                      >\n                        View\n                      </Button>\n                      {(getUserData().usertype == 1 ||\n                        getUserData().usertype == 2) && (\n                        <Button\n                          className=\"mx-1\"\n                          variant=\"danger\"\n                          size=\"sm\"\n                          onClick={() => handleDelete(item._id)}\n                        >\n                          Clear\n                        </Button>\n                      )}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </Table>\n          </Col>\n        </Row>\n      </Container>\n      <Footer></Footer>\n\n      <Modal show={show} onHide={handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>Order Details</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Table striped bordered hover>\n            <thead>\n              <tr>\n                <th>#</th>\n                <th>Product</th>\n                <th>Price</th>\n                <th>Quantity</th>\n                <th>Total</th>\n              </tr>\n            </thead>\n            <tbody>\n              {list.length == 0 && (\n                <tr className=\"text-center\">\n                  <td className=\"text-danger\" colSpan={5}>\n                    No Data Found\n                  </td>\n                </tr>\n              )}\n              {products.map((item, index) => (\n                <tr key={item._id}>\n                  <td>{index + 1}</td>\n                  <td>{item.name}</td>\n                  <td>{item.price}</td>\n                  <td>{item.cart_qty}</td>\n                  <td>{item.price * item.cart_qty}</td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nexport default Categories;\n","C:\\Users\\User\\Desktop\\EasyAgro-final\\EasyAgro-fyp-attempt-3\\client\\src\\components\\auth\\login.jsx",[],[],"C:\\Users\\User\\Desktop\\EasyAgro-final\\EasyAgro-fyp-attempt-3\\client\\src\\components\\auth\\signup.jsx",[],[],"C:\\Users\\User\\Desktop\\EasyAgro-final\\EasyAgro-fyp-attempt-3\\client\\src\\utils\\routes.js",[],[],"C:\\Users\\User\\Desktop\\EasyAgro-final\\EasyAgro-fyp-attempt-3\\client\\src\\components\\admin\\common\\footer.jsx",["320","321"],[],"import React from \"react\";\r\nimport { Container, Row } from \"react-bootstrap\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <>\r\n      <footer\r\n        className=\"footer mt-auto py-3 bg-dark text-white\"\r\n        style={{\r\n          position: \"fixed\",\r\n          bottom: \"0\",\r\n          left: \"0\",\r\n          width: \"100%\",\r\n          height: \"60px\" /* Height of the footer */,\r\n          //textAlign: \"center\",\r\n        }}\r\n      >\r\n        <div className=\"container\">\r\n          &copy; {new Date().getFullYear()} Copyright: EasyAgro-Agrarian\r\n          Service.\r\n        </div>\r\n      </footer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","C:\\Users\\User\\Desktop\\EasyAgro-final\\EasyAgro-fyp-attempt-3\\client\\src\\components\\admin\\common\\header.jsx",["322","323","324"],[],"C:\\Users\\User\\Desktop\\EasyAgro-final\\EasyAgro-fyp-attempt-3\\client\\src\\components\\admin\\map.jsx",[],[],{"ruleId":"325","severity":1,"message":"326","line":4,"column":8,"nodeType":"327","messageId":"328","endLine":4,"endColumn":14},{"ruleId":"325","severity":1,"message":"329","line":14,"column":3,"nodeType":"327","messageId":"328","endLine":14,"endColumn":8},{"ruleId":"325","severity":1,"message":"330","line":45,"column":9,"nodeType":"327","messageId":"328","endLine":45,"endColumn":20},{"ruleId":"331","severity":1,"message":"332","line":69,"column":23,"nodeType":"333","messageId":"334","endLine":69,"endColumn":25},{"ruleId":"335","severity":1,"message":"336","line":134,"column":15,"nodeType":"337","endLine":140,"endColumn":17},{"ruleId":"335","severity":1,"message":"336","line":164,"column":13,"nodeType":"337","endLine":167,"endColumn":14},{"ruleId":"331","severity":1,"message":"332","line":198,"column":28,"nodeType":"333","messageId":"334","endLine":198,"endColumn":30},{"ruleId":"331","severity":1,"message":"332","line":162,"column":30,"nodeType":"333","messageId":"334","endLine":162,"endColumn":32},{"ruleId":"331","severity":1,"message":"332","line":177,"column":46,"nodeType":"333","messageId":"334","endLine":177,"endColumn":48},{"ruleId":"331","severity":1,"message":"332","line":178,"column":38,"nodeType":"333","messageId":"334","endLine":178,"endColumn":40},{"ruleId":"331","severity":1,"message":"332","line":310,"column":30,"nodeType":"333","messageId":"334","endLine":310,"endColumn":32},{"ruleId":"331","severity":1,"message":"332","line":150,"column":30,"nodeType":"333","messageId":"334","endLine":150,"endColumn":32},{"ruleId":"331","severity":1,"message":"332","line":143,"column":30,"nodeType":"333","messageId":"334","endLine":143,"endColumn":32},{"ruleId":"331","severity":1,"message":"332","line":155,"column":46,"nodeType":"333","messageId":"334","endLine":155,"endColumn":48},{"ruleId":"331","severity":1,"message":"332","line":156,"column":38,"nodeType":"333","messageId":"334","endLine":156,"endColumn":40},{"ruleId":"331","severity":1,"message":"332","line":147,"column":30,"nodeType":"333","messageId":"334","endLine":147,"endColumn":32},{"ruleId":"331","severity":1,"message":"332","line":159,"column":46,"nodeType":"333","messageId":"334","endLine":159,"endColumn":48},{"ruleId":"331","severity":1,"message":"332","line":160,"column":38,"nodeType":"333","messageId":"334","endLine":160,"endColumn":40},{"ruleId":"325","severity":1,"message":"338","line":10,"column":3,"nodeType":"327","messageId":"328","endLine":10,"endColumn":8},{"ruleId":"331","severity":1,"message":"332","line":61,"column":32,"nodeType":"333","messageId":"334","endLine":61,"endColumn":34},{"ruleId":"331","severity":1,"message":"332","line":61,"column":61,"nodeType":"333","messageId":"334","endLine":61,"endColumn":63},{"ruleId":"339","severity":1,"message":"340","line":77,"column":6,"nodeType":"341","endLine":77,"endColumn":8,"suggestions":"342"},{"ruleId":"325","severity":1,"message":"343","line":87,"column":10,"nodeType":"327","messageId":"328","endLine":87,"endColumn":18},{"ruleId":"325","severity":1,"message":"344","line":87,"column":20,"nodeType":"327","messageId":"328","endLine":87,"endColumn":31},{"ruleId":"331","severity":1,"message":"345","line":113,"column":27,"nodeType":"333","messageId":"334","endLine":113,"endColumn":29},{"ruleId":"331","severity":1,"message":"332","line":164,"column":44,"nodeType":"333","messageId":"334","endLine":164,"endColumn":46},{"ruleId":"331","severity":1,"message":"332","line":165,"column":44,"nodeType":"333","messageId":"334","endLine":165,"endColumn":46},{"ruleId":"331","severity":1,"message":"332","line":169,"column":30,"nodeType":"333","messageId":"334","endLine":169,"endColumn":32},{"ruleId":"331","severity":1,"message":"332","line":183,"column":46,"nodeType":"333","messageId":"334","endLine":183,"endColumn":48},{"ruleId":"331","severity":1,"message":"332","line":184,"column":46,"nodeType":"333","messageId":"334","endLine":184,"endColumn":48},{"ruleId":"331","severity":1,"message":"332","line":203,"column":35,"nodeType":"333","messageId":"334","endLine":203,"endColumn":37},{"ruleId":"331","severity":1,"message":"332","line":171,"column":30,"nodeType":"333","messageId":"334","endLine":171,"endColumn":32},{"ruleId":"331","severity":1,"message":"332","line":185,"column":46,"nodeType":"333","messageId":"334","endLine":185,"endColumn":48},{"ruleId":"331","severity":1,"message":"332","line":186,"column":38,"nodeType":"333","messageId":"334","endLine":186,"endColumn":40},{"ruleId":"331","severity":1,"message":"332","line":56,"column":32,"nodeType":"333","messageId":"334","endLine":56,"endColumn":34},{"ruleId":"331","severity":1,"message":"332","line":56,"column":61,"nodeType":"333","messageId":"334","endLine":56,"endColumn":63},{"ruleId":"339","severity":1,"message":"340","line":71,"column":6,"nodeType":"341","endLine":71,"endColumn":8,"suggestions":"346"},{"ruleId":"331","severity":1,"message":"332","line":162,"column":44,"nodeType":"333","messageId":"334","endLine":162,"endColumn":46},{"ruleId":"331","severity":1,"message":"332","line":163,"column":44,"nodeType":"333","messageId":"334","endLine":163,"endColumn":46},{"ruleId":"331","severity":1,"message":"332","line":167,"column":30,"nodeType":"333","messageId":"334","endLine":167,"endColumn":32},{"ruleId":"331","severity":1,"message":"332","line":188,"column":46,"nodeType":"333","messageId":"334","endLine":188,"endColumn":48},{"ruleId":"331","severity":1,"message":"332","line":189,"column":46,"nodeType":"333","messageId":"334","endLine":189,"endColumn":48},{"ruleId":"331","severity":1,"message":"332","line":222,"column":35,"nodeType":"333","messageId":"334","endLine":222,"endColumn":37},{"ruleId":"325","severity":1,"message":"347","line":4,"column":8,"nodeType":"327","messageId":"328","endLine":4,"endColumn":12},{"ruleId":"325","severity":1,"message":"348","line":11,"column":3,"nodeType":"327","messageId":"328","endLine":11,"endColumn":7},{"ruleId":"325","severity":1,"message":"329","line":13,"column":3,"nodeType":"327","messageId":"328","endLine":13,"endColumn":8},{"ruleId":"331","severity":1,"message":"332","line":34,"column":32,"nodeType":"333","messageId":"334","endLine":34,"endColumn":34},{"ruleId":"331","severity":1,"message":"332","line":34,"column":61,"nodeType":"333","messageId":"334","endLine":34,"endColumn":63},{"ruleId":"339","severity":1,"message":"340","line":49,"column":6,"nodeType":"341","endLine":49,"endColumn":8,"suggestions":"349"},{"ruleId":"331","severity":1,"message":"332","line":80,"column":30,"nodeType":"333","messageId":"334","endLine":80,"endColumn":32},{"ruleId":"331","severity":1,"message":"332","line":127,"column":28,"nodeType":"333","messageId":"334","endLine":127,"endColumn":30},{"ruleId":"331","severity":1,"message":"332","line":36,"column":37,"nodeType":"333","messageId":"334","endLine":36,"endColumn":39},{"ruleId":"331","severity":1,"message":"332","line":39,"column":37,"nodeType":"333","messageId":"334","endLine":39,"endColumn":39},{"ruleId":"331","severity":1,"message":"332","line":42,"column":37,"nodeType":"333","messageId":"334","endLine":42,"endColumn":39},{"ruleId":"325","severity":1,"message":"350","line":2,"column":10,"nodeType":"327","messageId":"328","endLine":2,"endColumn":19},{"ruleId":"325","severity":1,"message":"351","line":2,"column":21,"nodeType":"327","messageId":"328","endLine":2,"endColumn":24},{"ruleId":"325","severity":1,"message":"352","line":2,"column":33,"nodeType":"327","messageId":"328","endLine":2,"endColumn":36},{"ruleId":"325","severity":1,"message":"326","line":4,"column":8,"nodeType":"327","messageId":"328","endLine":4,"endColumn":14},{"ruleId":"331","severity":1,"message":"332","line":151,"column":30,"nodeType":"333","messageId":"334","endLine":151,"endColumn":32},{"ruleId":"325","severity":1,"message":"329","line":14,"column":3,"nodeType":"327","messageId":"328","endLine":14,"endColumn":8},{"ruleId":"325","severity":1,"message":"330","line":48,"column":9,"nodeType":"327","messageId":"328","endLine":48,"endColumn":20},{"ruleId":"331","severity":1,"message":"332","line":72,"column":23,"nodeType":"333","messageId":"334","endLine":72,"endColumn":25},{"ruleId":"335","severity":1,"message":"336","line":140,"column":15,"nodeType":"337","endLine":146,"endColumn":17},{"ruleId":"335","severity":1,"message":"336","line":170,"column":13,"nodeType":"337","endLine":173,"endColumn":14},{"ruleId":"331","severity":1,"message":"332","line":204,"column":28,"nodeType":"333","messageId":"334","endLine":204,"endColumn":30},{"ruleId":"325","severity":1,"message":"338","line":10,"column":3,"nodeType":"327","messageId":"328","endLine":10,"endColumn":8},{"ruleId":"331","severity":1,"message":"332","line":61,"column":32,"nodeType":"333","messageId":"334","endLine":61,"endColumn":34},{"ruleId":"331","severity":1,"message":"332","line":61,"column":61,"nodeType":"333","messageId":"334","endLine":61,"endColumn":63},{"ruleId":"339","severity":1,"message":"340","line":77,"column":6,"nodeType":"341","endLine":77,"endColumn":8,"suggestions":"353"},{"ruleId":"325","severity":1,"message":"343","line":87,"column":10,"nodeType":"327","messageId":"328","endLine":87,"endColumn":18},{"ruleId":"325","severity":1,"message":"344","line":87,"column":20,"nodeType":"327","messageId":"328","endLine":87,"endColumn":31},{"ruleId":"331","severity":1,"message":"345","line":113,"column":27,"nodeType":"333","messageId":"334","endLine":113,"endColumn":29},{"ruleId":"331","severity":1,"message":"332","line":164,"column":44,"nodeType":"333","messageId":"334","endLine":164,"endColumn":46},{"ruleId":"331","severity":1,"message":"332","line":165,"column":44,"nodeType":"333","messageId":"334","endLine":165,"endColumn":46},{"ruleId":"331","severity":1,"message":"332","line":169,"column":30,"nodeType":"333","messageId":"334","endLine":169,"endColumn":32},{"ruleId":"331","severity":1,"message":"332","line":183,"column":46,"nodeType":"333","messageId":"334","endLine":183,"endColumn":48},{"ruleId":"331","severity":1,"message":"332","line":184,"column":46,"nodeType":"333","messageId":"334","endLine":184,"endColumn":48},{"ruleId":"331","severity":1,"message":"332","line":203,"column":35,"nodeType":"333","messageId":"334","endLine":203,"endColumn":37},{"ruleId":"331","severity":1,"message":"332","line":143,"column":30,"nodeType":"333","messageId":"334","endLine":143,"endColumn":32},{"ruleId":"331","severity":1,"message":"332","line":155,"column":46,"nodeType":"333","messageId":"334","endLine":155,"endColumn":48},{"ruleId":"331","severity":1,"message":"332","line":156,"column":38,"nodeType":"333","messageId":"334","endLine":156,"endColumn":40},{"ruleId":"331","severity":1,"message":"332","line":147,"column":30,"nodeType":"333","messageId":"334","endLine":147,"endColumn":32},{"ruleId":"331","severity":1,"message":"332","line":159,"column":46,"nodeType":"333","messageId":"334","endLine":159,"endColumn":48},{"ruleId":"331","severity":1,"message":"332","line":160,"column":38,"nodeType":"333","messageId":"334","endLine":160,"endColumn":40},{"ruleId":"331","severity":1,"message":"332","line":162,"column":30,"nodeType":"333","messageId":"334","endLine":162,"endColumn":32},{"ruleId":"331","severity":1,"message":"332","line":177,"column":46,"nodeType":"333","messageId":"334","endLine":177,"endColumn":48},{"ruleId":"331","severity":1,"message":"332","line":178,"column":38,"nodeType":"333","messageId":"334","endLine":178,"endColumn":40},{"ruleId":"331","severity":1,"message":"332","line":310,"column":30,"nodeType":"333","messageId":"334","endLine":310,"endColumn":32},{"ruleId":"331","severity":1,"message":"332","line":56,"column":32,"nodeType":"333","messageId":"334","endLine":56,"endColumn":34},{"ruleId":"331","severity":1,"message":"332","line":56,"column":61,"nodeType":"333","messageId":"334","endLine":56,"endColumn":63},{"ruleId":"339","severity":1,"message":"340","line":71,"column":6,"nodeType":"341","endLine":71,"endColumn":8,"suggestions":"354"},{"ruleId":"331","severity":1,"message":"332","line":162,"column":44,"nodeType":"333","messageId":"334","endLine":162,"endColumn":46},{"ruleId":"331","severity":1,"message":"332","line":163,"column":44,"nodeType":"333","messageId":"334","endLine":163,"endColumn":46},{"ruleId":"331","severity":1,"message":"332","line":167,"column":30,"nodeType":"333","messageId":"334","endLine":167,"endColumn":32},{"ruleId":"331","severity":1,"message":"332","line":188,"column":46,"nodeType":"333","messageId":"334","endLine":188,"endColumn":48},{"ruleId":"331","severity":1,"message":"332","line":189,"column":46,"nodeType":"333","messageId":"334","endLine":189,"endColumn":48},{"ruleId":"331","severity":1,"message":"332","line":230,"column":35,"nodeType":"333","messageId":"334","endLine":230,"endColumn":37},{"ruleId":"331","severity":1,"message":"332","line":171,"column":30,"nodeType":"333","messageId":"334","endLine":171,"endColumn":32},{"ruleId":"331","severity":1,"message":"332","line":185,"column":46,"nodeType":"333","messageId":"334","endLine":185,"endColumn":48},{"ruleId":"331","severity":1,"message":"332","line":186,"column":38,"nodeType":"333","messageId":"334","endLine":186,"endColumn":40},{"ruleId":"325","severity":1,"message":"348","line":11,"column":3,"nodeType":"327","messageId":"328","endLine":11,"endColumn":7},{"ruleId":"325","severity":1,"message":"329","line":13,"column":3,"nodeType":"327","messageId":"328","endLine":13,"endColumn":8},{"ruleId":"331","severity":1,"message":"332","line":34,"column":32,"nodeType":"333","messageId":"334","endLine":34,"endColumn":34},{"ruleId":"331","severity":1,"message":"332","line":34,"column":61,"nodeType":"333","messageId":"334","endLine":34,"endColumn":63},{"ruleId":"339","severity":1,"message":"340","line":49,"column":6,"nodeType":"341","endLine":49,"endColumn":8,"suggestions":"355"},{"ruleId":"331","severity":1,"message":"332","line":95,"column":30,"nodeType":"333","messageId":"334","endLine":95,"endColumn":32},{"ruleId":"331","severity":1,"message":"332","line":117,"column":48,"nodeType":"333","messageId":"334","endLine":117,"endColumn":50},{"ruleId":"331","severity":1,"message":"332","line":118,"column":48,"nodeType":"333","messageId":"334","endLine":118,"endColumn":50},{"ruleId":"331","severity":1,"message":"332","line":154,"column":28,"nodeType":"333","messageId":"334","endLine":154,"endColumn":30},{"ruleId":"325","severity":1,"message":"350","line":2,"column":10,"nodeType":"327","messageId":"328","endLine":2,"endColumn":19},{"ruleId":"325","severity":1,"message":"351","line":2,"column":21,"nodeType":"327","messageId":"328","endLine":2,"endColumn":24},{"ruleId":"331","severity":1,"message":"332","line":36,"column":37,"nodeType":"333","messageId":"334","endLine":36,"endColumn":39},{"ruleId":"331","severity":1,"message":"332","line":39,"column":37,"nodeType":"333","messageId":"334","endLine":39,"endColumn":39},{"ruleId":"331","severity":1,"message":"332","line":42,"column":37,"nodeType":"333","messageId":"334","endLine":42,"endColumn":39},"no-unused-vars","'Moment' is defined but never used.","Identifier","unusedVar","'Alert' is defined but never used.","'initialData' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Badge' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getList'. Either include it or remove the dependency array.","ArrayExpression",["356"],"'recordid' is assigned a value but never used.","'setRecordid' is assigned a value but never used.","Expected '!==' and instead saw '!='.",["357"],"'Swal' is defined but never used.","'Form' is defined but never used.",["358"],"'Container' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.",["359"],["360"],["361"],{"desc":"362","fix":"363"},{"desc":"362","fix":"364"},{"desc":"362","fix":"365"},{"desc":"362","fix":"366"},{"desc":"362","fix":"367"},{"desc":"362","fix":"368"},"Update the dependencies array to be: [getList]",{"range":"369","text":"370"},{"range":"371","text":"370"},{"range":"372","text":"370"},{"range":"373","text":"370"},{"range":"374","text":"370"},{"range":"375","text":"370"},[1715,1717],"[getList]",[1586,1588],[1039,1041],[1715,1717],[1586,1588],[1039,1041]]